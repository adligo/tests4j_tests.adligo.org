package org.adligo.tests4j_v1_tests.models.dependency_groups.jse;

import org.adligo.tests4j.models.dependency_groups.jse.JSE_Util;
import org.adligo.tests4j.models.shared.trials.SourceFileScope;
import org.adligo.tests4j.models.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;

@SourceFileScope (sourceClass=JSE_Util.class)
public class JSE_UtilTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.util.Collection",JSE_Util.COLLECTION);
		assertEquals("java.util.Comparator",JSE_Util.COMPARATOR);
		assertEquals("java.util.Deque",JSE_Util.DEQUE);
		assertEquals("java.util.Enumeration",JSE_Util.ENUMERATION);
		assertEquals("java.util.EventListener",JSE_Util.EVENT_LISTENER);
		assertEquals("java.util.Formattable",JSE_Util.FORMATTABLE);
		assertEquals("java.util.Iterator",JSE_Util.ITERATOR);
		assertEquals("java.util.List",JSE_Util.LIST);
		assertEquals("java.util.ListIterator",JSE_Util.LIST_ITERATOR);
		assertEquals("java.util.Map",JSE_Util.MAP);
		assertEquals("java.util.Map$Entry",JSE_Util.MAP_ENTRY);
		assertEquals("java.util.NavigableMap",JSE_Util.NAVIGABLE_MAP);
		assertEquals("java.util.NavigableSet",JSE_Util.NAVIGABLE_SET);
		assertEquals("java.util.Observer",JSE_Util.OBSERVER);
		assertEquals("java.util.Queue",JSE_Util.QUEUE);
		assertEquals("java.util.RandomAccess",JSE_Util.RANDOM_ACCESS);
		assertEquals("java.util.Set",JSE_Util.SET);
		assertEquals("java.util.SortedMap",JSE_Util.SORTED_MAP);
		assertEquals("java.util.SortedSet",JSE_Util.SORTED_SET);
		assertEquals("java.util.AbstractCollection",JSE_Util.ABSTRACT_COLLECTION);
		assertEquals("java.util.AbstractList",JSE_Util.ABSTRACT_LIST);
		assertEquals("java.util.AbstractMap",JSE_Util.ABSTRACT_MAP);
		assertEquals("java.util.AbstractMap$SimpleEntry",JSE_Util.ABSTRACT_MAP_SIMPLE_ENTRY);
		assertEquals("java.util.AbstractMap$SimpleImmutableEntry",JSE_Util.ABSTRACT_MAP_SIMPLE_IMMUTABLE_ENTRY);
		assertEquals("java.util.AbstractQueue",JSE_Util.ABSTRACT_QUEUE);
		assertEquals("java.util.AbstractSequentialList",JSE_Util.ABSTRACT_SEQUENTIAL_LIST);
		assertEquals("java.util.AbstractSet",JSE_Util.ABSTRACT_SET);
		assertEquals("java.util.ArrayQueue",JSE_Util.ARRAY_QUEUE);
		assertEquals("java.util.ArrayList",JSE_Util.ARRAY_LIST);
		assertEquals("java.util.Arrays",JSE_Util.ARRAYS);
		assertEquals("java.util.BitSet",JSE_Util.BIT_SET);
		assertEquals("java.util.Calendar",JSE_Util.CALENDAR);
		assertEquals("java.util.Collections",JSE_Util.COLLECTIONS);
		assertEquals("java.util.Currency",JSE_Util.CURRENCY);
		assertEquals("java.util.Date",JSE_Util.DATE);
		assertEquals("java.util.Dictionary",JSE_Util.DICTIONARY);
		assertEquals("java.util.EnumMap",JSE_Util.ENUM_MAP);
		assertEquals("java.util.EnumSet",JSE_Util.ENUM_SET);
		assertEquals("java.util.EventListenerProxy",JSE_Util.EVENT_LISTENER_PROXY);
		assertEquals("java.util.EventObject",JSE_Util.EVENT_OBJECT);
		assertEquals("java.util.FormattableFlags",JSE_Util.FORMATTABLE_FLAGS);
		assertEquals("java.util.Formatter",JSE_Util.FORMATTER);
		assertEquals("java.util.GregorianCalendar",JSE_Util.GREGORIAN_CALENDAR);
		assertEquals("java.util.HashMap",JSE_Util.HASH_MAP);
		assertEquals("java.util.HashSet",JSE_Util.HASH_SET);
		assertEquals("java.util.Hashtable",JSE_Util.HASHTABLE);
		assertEquals("java.util.IdentityHashMap",JSE_Util.IDENTITY_HASH_MAP);
		assertEquals("java.util.LinkedHashMap",JSE_Util.LINKED_HASH_MAP);
		assertEquals("java.util.LinkedHashSet",JSE_Util.LINKED_HASH_SET);
		assertEquals("java.util.LinkedList",JSE_Util.LINKED_LIST);
		assertEquals("java.util.ListResourceBundle",JSE_Util.LIST_RESOURCE_BUNDLE);
		assertEquals("java.util.Locale",JSE_Util.LOCALE);
		assertEquals("java.util.Locale$Builder",JSE_Util.LOCALE_BUILDER);
		assertEquals("java.util.Objects",JSE_Util.OBJECTS);
		assertEquals("java.util.Observable",JSE_Util.OBSERVABLE);
		assertEquals("java.util.PriorityQueue",JSE_Util.PRIORITY_QUEUE);
		assertEquals("java.util.Properties",JSE_Util.PROPERTIES);
		assertEquals("java.util.PropertyPermission",JSE_Util.PROPERTY_PERMISSION);
		assertEquals("java.util.PropertyResourceBundle",JSE_Util.PROPERTY_RESOURCE_BUNDLE);
		assertEquals("java.util.Random",JSE_Util.RANDOM);
		assertEquals("java.util.ResourceBundle",JSE_Util.RESOURCE_BUNDLE);
		assertEquals("java.util.ResourceBundle$Control",JSE_Util.RESOURCE_BUNDLE_CONTROL);
		assertEquals("java.util.Scanner",JSE_Util.SCANNER);
		assertEquals("java.util.ServiceLoader",JSE_Util.SERVICE_LOADER);
		assertEquals("java.util.SimpleTimeZone",JSE_Util.SIMPLE_TIME_ZONE);
		assertEquals("java.util.Stack",JSE_Util.STACK);
		assertEquals("java.util.StringTokenizer",JSE_Util.STRING_TOKENIZER);
		assertEquals("java.util.Timer",JSE_Util.TIMER);
		assertEquals("java.util.TimerTask",JSE_Util.TIMER_TASK);
		assertEquals("java.util.TimeZone",JSE_Util.TIME_ZONE);
		assertEquals("java.util.TreeMap",JSE_Util.TREE_MAP);
		assertEquals("java.util.TreeSet",JSE_Util.TREE_SET);
		assertEquals("java.util.UUID",JSE_Util.UUID);
		assertEquals("java.util.Vector",JSE_Util.VECTOR);
		assertEquals("java.util.WeakHashMap",JSE_Util.WEAK_HASH_MAP);
		assertEquals("java.util.Formatter$BigDecimalLayoutForm",JSE_Util.FORMATTER_BIG_DECIMAL_LAYOUT_FORM);
		assertEquals("java.util.Locale$Category",JSE_Util.LOCALE_CATEGORY);
		assertEquals("java.util.ConcurrentModificationException",JSE_Util.CONCURRENT_MODIFICATION_EXCEPTION);
		assertEquals("java.util.DuplicateFormatFlagsException",JSE_Util.DUPLICATE_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.EmptyStackException",JSE_Util.EMPTY_STACK_EXCEPTION);
		assertEquals("java.util.FormatFlagsConversionMismatchException",JSE_Util.FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION);
		assertEquals("java.util.FormatterClosedException",JSE_Util.FORMATTER_CLOSED_EXCEPTION);
		assertEquals("java.util.IllegalFormatCodePointException",JSE_Util.ILLEGAL_FORMAT_CODE_POINT_EXCEPTION);
		assertEquals("java.util.IllegalFormatConversionException",JSE_Util.ILLEGAL_FORMAT_CONVERSION_EXCEPTION);
		assertEquals("java.util.IllegalFormatException",JSE_Util.ILLEGAL_FORMAT_EXCEPTION);
		assertEquals("java.util.IllegalFormatFlagsException",JSE_Util.ILLEGAL_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.IllegalFormatPrecisionException",JSE_Util.ILLEGAL_FORMAT_PRECISION_EXCEPTION);
		assertEquals("java.util.IllegalFormatWidthException",JSE_Util.ILLEGAL_FORMAT_WIDTH_EXCEPTION);
		assertEquals("java.util.IllformedLocaleException",JSE_Util.ILLFORMED_LOCALE_EXCEPTION);
		assertEquals("java.util.InputMismatchException",JSE_Util.INPUT_MISMATCH_EXCEPTION);
		assertEquals("java.util.InvalidPropertiesFormatException",JSE_Util.INVALID_PROPERTIES_FORMAT_EXCEPTION);
		assertEquals("java.util.MissingFormatArgumentException",JSE_Util.MISSING_FORMAT_ARGUMENT_EXCEPTION);
		assertEquals("java.util.MissingFormatWidthException",JSE_Util.MISSING_FORMAT_WIDTH_EXCEPTION);
		assertEquals("java.util.MissingResourceException",JSE_Util.MISSING_RESOURCE_EXCEPTION);
		assertEquals("java.util.NoSuchElementException",JSE_Util.NO_SUCH_ELEMENT_EXCEPTION);
		assertEquals("java.util.TooManyListenersException",JSE_Util.TOO_MANY_LISTENERS_EXCEPTION);
		assertEquals("java.util.UnknownFormatConversionException",JSE_Util.UNKNOWN_FORMAT_CONVERSION_EXCEPTION);
		assertEquals("java.util.UnknownFormatFlagsException",JSE_Util.UNKNOWN_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.ServiceConfigurationError",JSE_Util.SERVICE_CONFIGURATION_ERROR);
		assertEquals(JSE_Util.class.getName(), JSE_Util.INSTANCE.getClass().getName());
	}
	
	@Test
	public void testConstantLookup() {
		assertEquals("java.util",JSE_Util.INSTANCE.getPackageName());
		
		assertEquals("COLLECTION",JSE_Util.INSTANCE.getConstantName("java.util.Collection"));
		assertEquals("COMPARATOR",JSE_Util.INSTANCE.getConstantName("java.util.Comparator"));
		assertEquals("DEQUE",JSE_Util.INSTANCE.getConstantName("java.util.Deque"));
		assertEquals("ENUMERATION",JSE_Util.INSTANCE.getConstantName("java.util.Enumeration"));
		assertEquals("EVENT_LISTENER",JSE_Util.INSTANCE.getConstantName("java.util.EventListener"));
		assertEquals("FORMATTABLE",JSE_Util.INSTANCE.getConstantName("java.util.Formattable"));
		assertEquals("ITERATOR",JSE_Util.INSTANCE.getConstantName("java.util.Iterator"));
		assertEquals("LIST",JSE_Util.INSTANCE.getConstantName("java.util.List"));
		assertEquals("LIST_ITERATOR",JSE_Util.INSTANCE.getConstantName("java.util.ListIterator"));
		assertEquals("MAP",JSE_Util.INSTANCE.getConstantName("java.util.Map"));
		assertEquals("ENTRY",JSE_Util.INSTANCE.getConstantName("java.util.Map$Entry"));
		assertEquals("NAVIGABLE_MAP",JSE_Util.INSTANCE.getConstantName("java.util.NavigableMap"));
		assertEquals("NAVIGABLE_SET",JSE_Util.INSTANCE.getConstantName("java.util.NavigableSet"));
		assertEquals("OBSERVER",JSE_Util.INSTANCE.getConstantName("java.util.Observer"));
		assertEquals("QUEUE",JSE_Util.INSTANCE.getConstantName("java.util.Queue"));
		assertEquals("RANDOM_ACCESS",JSE_Util.INSTANCE.getConstantName("java.util.RandomAccess"));
		assertEquals("SET",JSE_Util.INSTANCE.getConstantName("java.util.Set"));
		assertEquals("SORTED_MAP",JSE_Util.INSTANCE.getConstantName("java.util.SortedMap"));
		assertEquals("SORTED_SET",JSE_Util.INSTANCE.getConstantName("java.util.SortedSet"));
		assertEquals("ABSTRACT_COLLECTION",JSE_Util.INSTANCE.getConstantName("java.util.AbstractCollection"));
		assertEquals("ABSTRACT_LIST",JSE_Util.INSTANCE.getConstantName("java.util.AbstractList"));
		assertEquals("ABSTRACT_MAP",JSE_Util.INSTANCE.getConstantName("java.util.AbstractMap"));
		assertEquals("SIMPLE_ENTRY",JSE_Util.INSTANCE.getConstantName("java.util.AbstractMap$SimpleEntry"));
		assertEquals("SIMPLE_IMMUTABLE_ENTRY",JSE_Util.INSTANCE.getConstantName("java.util.AbstractMap$SimpleImmutableEntry"));
		assertEquals("ABSTRACT_QUEUE",JSE_Util.INSTANCE.getConstantName("java.util.AbstractQueue"));
		assertEquals("ABSTRACT_SEQUENTIAL_LIST",JSE_Util.INSTANCE.getConstantName("java.util.AbstractSequentialList"));
		assertEquals("ABSTRACT_SET",JSE_Util.INSTANCE.getConstantName("java.util.AbstractSet"));
		assertEquals("ARRAY_DEQUE",JSE_Util.INSTANCE.getConstantName("java.util.ArrayDeque"));
		assertEquals("ARRAY_LIST",JSE_Util.INSTANCE.getConstantName("java.util.ArrayList"));
		assertEquals("ARRAYS",JSE_Util.INSTANCE.getConstantName("java.util.Arrays"));
		assertEquals("BIT_SET",JSE_Util.INSTANCE.getConstantName("java.util.BitSet"));
		assertEquals("CALENDAR",JSE_Util.INSTANCE.getConstantName("java.util.Calendar"));
		assertEquals("COLLECTIONS",JSE_Util.INSTANCE.getConstantName("java.util.Collections"));
		assertEquals("CURRENCY",JSE_Util.INSTANCE.getConstantName("java.util.Currency"));
		assertEquals("DATE",JSE_Util.INSTANCE.getConstantName("java.util.Date"));
		assertEquals("DICTIONARY",JSE_Util.INSTANCE.getConstantName("java.util.Dictionary"));
		assertEquals("ENUM_MAP",JSE_Util.INSTANCE.getConstantName("java.util.EnumMap"));
		assertEquals("ENUM_SET",JSE_Util.INSTANCE.getConstantName("java.util.EnumSet"));
		assertEquals("EVENT_LISTENER_PROXY",JSE_Util.INSTANCE.getConstantName("java.util.EventListenerProxy"));
		assertEquals("EVENT_OBJECT",JSE_Util.INSTANCE.getConstantName("java.util.EventObject"));
		assertEquals("FORMATTABLE_FLAGS",JSE_Util.INSTANCE.getConstantName("java.util.FormattableFlags"));
		assertEquals("FORMATTER",JSE_Util.INSTANCE.getConstantName("java.util.Formatter"));
		assertEquals("GREGORIAN_CALENDAR",JSE_Util.INSTANCE.getConstantName("java.util.GregorianCalendar"));
		assertEquals("HASH_MAP",JSE_Util.INSTANCE.getConstantName("java.util.HashMap"));
		assertEquals("HASH_SET",JSE_Util.INSTANCE.getConstantName("java.util.HashSet"));
		assertEquals("HASHTABLE",JSE_Util.INSTANCE.getConstantName("java.util.Hashtable"));
		assertEquals("IDENTITY_HASH_MAP",JSE_Util.INSTANCE.getConstantName("java.util.IdentityHashMap"));
		assertEquals("LINKED_HASH_MAP",JSE_Util.INSTANCE.getConstantName("java.util.LinkedHashMap"));
		assertEquals("LINKED_HASH_SET",JSE_Util.INSTANCE.getConstantName("java.util.LinkedHashSet"));
		assertEquals("LIST_RESOURCE_BUNDLE",JSE_Util.INSTANCE.getConstantName("java.util.ListResourceBundle"));
		assertEquals("LOCALE",JSE_Util.INSTANCE.getConstantName("java.util.Locale"));
		assertEquals("BUILDER",JSE_Util.INSTANCE.getConstantName("java.util.Locale$Builder"));
		assertEquals("OBJECTS",JSE_Util.INSTANCE.getConstantName("java.util.Objects"));
		assertEquals("OBSERVABLE",JSE_Util.INSTANCE.getConstantName("java.util.Observable"));
		assertEquals("PRIORITY_QUEUE",JSE_Util.INSTANCE.getConstantName("java.util.PriorityQueue"));
		assertEquals("PROPERTIES",JSE_Util.INSTANCE.getConstantName("java.util.Properties"));
		assertEquals("PROPERTY_PERMISSION",JSE_Util.INSTANCE.getConstantName("java.util.PropertyPermission"));
		assertEquals("PROPERTY_RESOURCE_BUNDLE",JSE_Util.INSTANCE.getConstantName("java.util.PropertyResourceBundle"));
		assertEquals("RANDOM",JSE_Util.INSTANCE.getConstantName("java.util.Random"));
		assertEquals("RESOURCE_BUNDLE",JSE_Util.INSTANCE.getConstantName("java.util.ResourceBundle"));
		assertEquals("CONTROL",JSE_Util.INSTANCE.getConstantName("java.util.ResourceBundle$Control"));
		assertEquals("SCANNER",JSE_Util.INSTANCE.getConstantName("java.util.Scanner"));
		assertEquals("SERVICE_LOADER",JSE_Util.INSTANCE.getConstantName("java.util.ServiceLoader"));
		assertEquals("SIMPLE_TIME_ZONE",JSE_Util.INSTANCE.getConstantName("java.util.SimpleTimeZone"));
		assertEquals("STACK",JSE_Util.INSTANCE.getConstantName("java.util.Stack"));
		assertEquals("STRING_TOKENIZER",JSE_Util.INSTANCE.getConstantName("java.util.StringTokenizer"));
		assertEquals("TIMER",JSE_Util.INSTANCE.getConstantName("java.util.Timer"));
		assertEquals("TIMER_TASK",JSE_Util.INSTANCE.getConstantName("java.util.TimerTask"));
		assertEquals("TIME_ZONE",JSE_Util.INSTANCE.getConstantName("java.util.TimeZone"));
		assertEquals("TREE_MAP",JSE_Util.INSTANCE.getConstantName("java.util.TreeMap"));
		assertEquals("TREE_SET",JSE_Util.INSTANCE.getConstantName("java.util.TreeSet"));
		assertEquals("UUID",JSE_Util.INSTANCE.getConstantName("java.util.UUID"));
		assertEquals("VECTOR",JSE_Util.INSTANCE.getConstantName("java.util.Vector"));
		assertEquals("WEAK_HASH_MAP",JSE_Util.INSTANCE.getConstantName("java.util.WeakHashMap"));
		assertEquals("BIG_DECIMAL_LAYOUT_FORM",JSE_Util.INSTANCE.getConstantName("java.util.Formatter$BigDecimalLayoutForm"));
		assertEquals("CATEGORY",JSE_Util.INSTANCE.getConstantName("java.util.Locale$Category"));
		assertEquals("CONCURRENT_MODIFICATION_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.ConcurrentModificationException"));
		assertEquals("DUPLICATE_FORMAT_FLAGS_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.DuplicateFormatFlagsException"));
		assertEquals("EMPTY_STACK_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.EmptyStackException"));
		assertEquals("FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.FormatFlagsConversionMismatchException"));
		assertEquals("FORMATTER_CLOSED_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.FormatterClosedException"));
		assertEquals("ILLEGAL_FORMAT_CODE_POINT_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatCodePointException"));
		assertEquals("ILLEGAL_FORMAT_CONVERSION_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatConversionException"));
		assertEquals("ILLEGAL_FORMAT_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatException"));
		assertEquals("ILLEGAL_FORMAT_FLAGS_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatFlagsException"));
		assertEquals("ILLEGAL_FORMAT_PRECISION_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatPrecisionException"));
		assertEquals("ILLEGAL_FORMAT_WIDTH_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllegalFormatWidthException"));
		assertEquals("ILLFORMED_LOCALE_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.IllformedLocaleException"));
		assertEquals("INPUT_MISMATCH_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.InputMismatchException"));
		assertEquals("INVALID_PROPERTIES_FORMAT_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.InvalidPropertiesFormatException"));
		assertEquals("MISSING_FORMAT_ARGUMENT_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.MissingFormatArgumentException"));
		assertEquals("MISSING_FORMAT_WIDTH_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.MissingFormatWidthException"));
		assertEquals("MISSING_RESOURCE_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.MissingResourceException"));
		assertEquals("NO_SUCH_ELEMENT_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.NoSuchElementException"));
		assertEquals("TOO_MANY_LISTENERS_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.TooManyListenersException"));
		assertEquals("UNKNOWN_FORMAT_FLAGS_EXCEPTION",JSE_Util.INSTANCE.getConstantName("java.util.UnknownFormatFlagsException"));
		assertEquals("SERVICE_CONFIGURATION_ERROR",JSE_Util.INSTANCE.getConstantName("java.util.ServiceConfigurationError"));
	}
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 2);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 198;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 2;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 198;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 2;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
