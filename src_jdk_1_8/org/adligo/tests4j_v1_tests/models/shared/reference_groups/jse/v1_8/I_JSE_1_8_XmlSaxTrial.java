package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse.v1_8;

import org.adligo.tests4j.models.shared.reference_groups.jse.v1_8.I_JSE_1_8_XmlSax;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_v1_8_GwtReferenceGroup;

@SourceFileScope (sourceClass=I_JSE_1_8_XmlSax.class)
@AllowedReferences (groups=Tests4J_JSE_v1_8_GwtReferenceGroup.class)
public class I_JSE_1_8_XmlSaxTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {

		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
	  assertEquals("org.xml.sax.Attributes",I_JSE_1_8_XmlSax.ATTRIBUTES);
	  assertEquals("org.xml.sax.ContentHandler",I_JSE_1_8_XmlSax.CONTENT_HANDLER);
	  assertEquals("org.xml.sax.DTDHandler",I_JSE_1_8_XmlSax.DTDHANDLER);
	  assertEquals("org.xml.sax.EntityResolver",I_JSE_1_8_XmlSax.ENTITY_RESOLVER);
	  assertEquals("org.xml.sax.ErrorHandler",I_JSE_1_8_XmlSax.ERROR_HANDLER);
	  assertEquals("org.xml.sax.Locator",I_JSE_1_8_XmlSax.LOCATOR);
	  assertEquals("org.xml.sax.Parser",I_JSE_1_8_XmlSax.PARSER);
	  assertEquals("org.xml.sax.XMLFilter",I_JSE_1_8_XmlSax.XMLFILTER);
	  assertEquals("org.xml.sax.XMLReader",I_JSE_1_8_XmlSax.XMLREADER);
	  assertEquals("org.xml.sax.InputSource",I_JSE_1_8_XmlSax.INPUT_SOURCE);
	  assertEquals("org.xml.sax.SAXException",I_JSE_1_8_XmlSax.SAXEXCEPTION);
	  assertEquals("org.xml.sax.SAXNotRecognizedException",I_JSE_1_8_XmlSax.SAXNOT_RECOGNIZED_EXCEPTION);
	  assertEquals("org.xml.sax.SAXNotSupportedException",I_JSE_1_8_XmlSax.SAXNOT_SUPPORTED_EXCEPTION);
	  assertEquals("org.xml.sax.SAXParseException",I_JSE_1_8_XmlSax.SAXPARSE_EXCEPTION);
	}

	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 14;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 14;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
