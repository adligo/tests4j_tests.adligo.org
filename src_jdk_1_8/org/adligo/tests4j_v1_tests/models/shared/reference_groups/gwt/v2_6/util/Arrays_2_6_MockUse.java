package org.adligo.tests4j_v1_tests.models.shared.reference_groups.gwt.v2_6.util;

import java.util.Arrays;
import java.util.Comparator;

/** autogenerated by org.adligo.tests4j.gen.dependency_groups.ClassUseGen*/
public class Arrays_2_6_MockUse {

	public Arrays_2_6_MockUse() {
		callArraysMethods();
	}

	public void callArraysMethods() {
		
		Arrays.deepEquals(null, null);
		Arrays.equals(new int [] {}, new int [] {});
		Arrays.equals(new long [] {}, new long [] {});
		Arrays.equals(new byte [] {}, new byte [] {});
		Arrays.equals(new boolean [] {}, new boolean [] {});
		Arrays.equals(new short [] {}, new short [] {});
		Arrays.equals(new double [] {}, new double [] {});
		Arrays.equals(new float [] {}, new float [] {});
		Arrays.equals(new char [] {}, new char [] {});
		Arrays.equals(new Object [] {}, new Object [] {});
		Arrays.binarySearch(new byte [] {}, (byte) 0);
		Arrays.binarySearch(new int [] {}, 0);
		Arrays.binarySearch(new char [] {}, 'c');
		Arrays.binarySearch(new double [] {}, 0.1);
		Arrays.binarySearch(new float [] {}, (float) 0.2);
		Arrays.binarySearch(new int [] {}, 2);
		Arrays.binarySearch(new long [] {}, 3L);
		Arrays.binarySearch(new Object[]{}, new Object());
		Arrays.binarySearch(new Object[]{}, new Object(), new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Arrays.binarySearch(new short [] {}, (short) 1);
		Arrays.deepHashCode(new Object[] {});
		Arrays.hashCode(new int [] {});
		Arrays.hashCode(new long [] {});
		Arrays.hashCode(new double [] {});
		Arrays.hashCode(new char [] {});
		Arrays.hashCode(new float [] {});
		Arrays.hashCode(new short [] {});
		Arrays.hashCode(new byte [] {});
		Arrays.hashCode(new boolean [] {});
		Arrays.hashCode(new Object [] {});
		Arrays.deepToString(new Object [] {});
		Arrays.toString(new int [] {});
		Arrays.toString(new long [] {});
		Arrays.toString(new short [] {});
		Arrays.toString(new double [] {});
		Arrays.toString(new char [] {});
		Arrays.toString(new byte [] {});
		Arrays.toString(new boolean [] {});
		Arrays.toString(new float [] {});
		Arrays.toString(new Object [] {});
		Arrays.asList(new Object [] {});
		Arrays.fill(new int [] {}, 0);
		Arrays.fill(new int [] {1, 2, 3}, 2, 2, 0);
		Arrays.fill(new byte [] {}, (byte) 0);
		Arrays.fill(new byte [3], 2, 2, (byte)  0);
		Arrays.fill(new boolean [] {}, true);
		Arrays.fill(new boolean [] {true, true, false}, 2, 2, false);
		Arrays.fill(new char [] {}, 'c');
		Arrays.fill(new char [] {'a','b','c'}, 2, 2, 'c');
		Arrays.fill(new double [2], 0.1);
		Arrays.fill(new double [4], 2, 2, 0.1);
		Arrays.fill(new float [2], (float) 0.2);
		Arrays.fill(new float [3], 2, 2, (float) 0.2);
		Arrays.fill(new long [3], 2, 2, 3L);
		Arrays.fill(new long [3], 3L);
		Arrays.fill(new Object [3], 2, 2, new Object());
		Arrays.fill(new Object [2] , new Object());
		Arrays.fill(new short [3], 2, 2, (short) 1);
		Arrays.fill(new short [1], (short) 1);
		Arrays.sort(new byte [] {});
		Arrays.sort(new byte [] {1,2,3}, 2, 2);
		Arrays.sort(new char [] {});
		Arrays.sort(new char [] {'1','b','b'}, 2, 2);
		Arrays.sort(new int [] {});
		Arrays.sort(new int [] {12,11,10}, 2, 2);
		Arrays.sort(new long [] {});
		Arrays.sort(new long [] {1L,2L,3L}, 2, 2);
		Arrays.sort(new double [] {});
		Arrays.sort(new double [] {1.1,2.2,3.3}, 2, 2);
		Arrays.sort(new float [] {});
		Arrays.sort(new float [] {(float) 1.1,
				(float) 2.2,
				(float) 3.3}, 2, 2);
		Arrays.sort(new short [] {});
		Arrays.sort(new short [] {(short) 1, (short) 2, (short) 3}, 2, 2);
		Arrays.sort(new Object[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, 
				2, 2, new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Arrays.sort(new Object[] {}, new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Arrays.sort(new Object[] {});
		Arrays.sort(new Object[] {Short.MIN_VALUE, Short.MIN_VALUE, Short.MAX_VALUE}, 2, 2);
	}
}
