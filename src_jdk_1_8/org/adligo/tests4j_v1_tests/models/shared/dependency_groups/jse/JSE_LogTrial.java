package org.adligo.tests4j_v1_tests.models.shared.dependency_groups.jse;

import org.adligo.tests4j.models.shared.dependency_groups.jse.JSE_Log;
import org.adligo.tests4j.models.shared.trials.SourceFileScope;
import org.adligo.tests4j.models.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;

@SourceFileScope (sourceClass=JSE_Log.class)
public class JSE_LogTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.util.logging.Filter",JSE_Log.FILTER);
		assertEquals("java.util.logging.ConsoleHandler",JSE_Log.CONSOLE_HANDLER);
		assertEquals("java.util.logging.ErrorManager",JSE_Log.ERROR_MANAGER);
		assertEquals("java.util.logging.FileHandler",JSE_Log.FILE_HANDLER);
		assertEquals("java.util.logging.Formatter",JSE_Log.FORMATTER);
		assertEquals("java.util.logging.Handler",JSE_Log.HANDLER);
		assertEquals("java.util.logging.Level",JSE_Log.LEVEL);
		assertEquals("java.util.logging.Logger",JSE_Log.LOGGER);
		assertEquals("java.util.logging.LoggingPermission",JSE_Log.LOGGING_PERMISSION);
		assertEquals("java.util.logging.LogManager",JSE_Log.LOG_MANAGER);
		assertEquals("java.util.logging.LogRecord",JSE_Log.LOG_RECORD);
		assertEquals("java.util.logging.MemoryHandler",JSE_Log.MEMORY_HANDLER);
		assertEquals("java.util.logging.SimpleFormatter",JSE_Log.SIMPLE_FORMATTER);
		assertEquals("java.util.logging.SocketHandler",JSE_Log.SOCKET_HANDLER);
		assertEquals("java.util.logging.StreamHandler",JSE_Log.STREAM_HANDLER);
		assertEquals("java.util.logging.XMLFormatter",JSE_Log.XMLFORMATTER);
		assertEquals(JSE_Log.class.getName(), JSE_Log.INSTANCE.getClass().getName());
	}
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 17;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 2;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 17;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 2;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
