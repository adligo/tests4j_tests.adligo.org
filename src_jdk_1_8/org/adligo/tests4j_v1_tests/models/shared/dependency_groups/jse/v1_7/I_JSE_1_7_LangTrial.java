package org.adligo.tests4j_v1_tests.models.shared.dependency_groups.jse.v1_7;

import org.adligo.tests4j.models.shared.dependency_groups.jse.v1_7.I_JSE_1_7_Lang;
import org.adligo.tests4j.shared.asserts.dependency.AllowedDependencies;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.dependency_groups.Tests4J_JSE_v1_7_DependencyGroup;

@SourceFileScope (sourceClass=I_JSE_1_7_Lang.class)
@AllowedDependencies (groups=Tests4J_JSE_v1_7_DependencyGroup.class)
public class I_JSE_1_7_LangTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {

		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.lang.Appendable",I_JSE_1_7_Lang.APPENDABLE);
		assertEquals("java.lang.AutoCloseable",I_JSE_1_7_Lang.AUTO_CLOSEABLE);
		assertEquals("java.lang.CharSequence",I_JSE_1_7_Lang.CHAR_SEQUENCE);
		assertEquals("java.lang.Cloneable",I_JSE_1_7_Lang.CLONEABLE);
		assertEquals("java.lang.Comparable",I_JSE_1_7_Lang.COMPARABLE);
		assertEquals("java.lang.Iterable",I_JSE_1_7_Lang.ITERABLE);
		assertEquals("java.lang.Readable",I_JSE_1_7_Lang.READABLE);
		assertEquals("java.lang.Runnable",I_JSE_1_7_Lang.RUNNABLE);
		assertEquals("java.lang.Thread$UncaughtExceptionHandler",I_JSE_1_7_Lang.THREAD_UNCAUGHT_EXCEPTION_HANDLER);
		assertEquals("java.lang.Boolean",I_JSE_1_7_Lang.BOOLEAN);
		assertEquals("java.lang.Byte",I_JSE_1_7_Lang.BYTE);
		assertEquals("java.lang.Character",I_JSE_1_7_Lang.CHARACTER);
		assertEquals("java.lang.Character$Subset",I_JSE_1_7_Lang.CHARACTER_SUBSET);
		assertEquals("java.lang.Character$UnicodeBlock",I_JSE_1_7_Lang.CHARACTER_UNICODE_BLOCK);
		assertEquals("java.lang.Class",I_JSE_1_7_Lang.CLASS);
		assertEquals("java.lang.ClassLoader",I_JSE_1_7_Lang.CLASS_LOADER);
		assertEquals("java.lang.ClassValue",I_JSE_1_7_Lang.CLASS_VALUE);
		assertEquals("java.lang.Compiler",I_JSE_1_7_Lang.COMPILER);
		assertEquals("java.lang.Double",I_JSE_1_7_Lang.DOUBLE);
		assertEquals("java.lang.Enum",I_JSE_1_7_Lang.ENUM);
		assertEquals("java.lang.Float",I_JSE_1_7_Lang.FLOAT);
		assertEquals("java.lang.InheritableThreadLocal",I_JSE_1_7_Lang.INHERITABLE_THREAD_LOCAL);
		assertEquals("java.lang.Integer",I_JSE_1_7_Lang.INTEGER);
		assertEquals("java.lang.Long",I_JSE_1_7_Lang.LONG);
		assertEquals("java.lang.Math",I_JSE_1_7_Lang.MATH);
		assertEquals("java.lang.Number",I_JSE_1_7_Lang.NUMBER);
		assertEquals("java.lang.Object",I_JSE_1_7_Lang.OBJECT);
		assertEquals("java.lang.Package",I_JSE_1_7_Lang.PACKAGE);
		assertEquals("java.lang.Process",I_JSE_1_7_Lang.PROCESS);
		assertEquals("java.lang.ProcessBuilder",I_JSE_1_7_Lang.PROCESS_BUILDER);
		assertEquals("java.lang.ProcessBuilder$Redirect",I_JSE_1_7_Lang.PROCESS_BUILDER_REDIRECT);
		assertEquals("java.lang.Runtime",I_JSE_1_7_Lang.RUNTIME);
		assertEquals("java.lang.RuntimePermission",I_JSE_1_7_Lang.RUNTIME_PERMISSION);
		assertEquals("java.lang.SecurityManager",I_JSE_1_7_Lang.SECURITY_MANAGER);
		assertEquals("java.lang.Short",I_JSE_1_7_Lang.SHORT);
		assertEquals("java.lang.StackTraceElement",I_JSE_1_7_Lang.STACK_TRACE_ELEMENT);
		assertEquals("java.lang.StrictMath",I_JSE_1_7_Lang.STRICT_MATH);
		assertEquals("java.lang.String",I_JSE_1_7_Lang.STRING);
		assertEquals("java.lang.StringBuffer",I_JSE_1_7_Lang.STRING_BUFFER);
		assertEquals("java.lang.StringBuilder",I_JSE_1_7_Lang.STRING_BUILDER);
		assertEquals("java.lang.System",I_JSE_1_7_Lang.SYSTEM);
		assertEquals("java.lang.Thread",I_JSE_1_7_Lang.THREAD);
		assertEquals("java.lang.ThreadGroup",I_JSE_1_7_Lang.THREAD_GROUP);
		assertEquals("java.lang.ThreadLocal",I_JSE_1_7_Lang.THREAD_LOCAL);
		assertEquals("java.lang.Throwable",I_JSE_1_7_Lang.THROWABLE);
		assertEquals("java.lang.Void",I_JSE_1_7_Lang.VOID);
		assertEquals("java.lang.Character$UnicodeScript",I_JSE_1_7_Lang.CHARACTER_UNICODE_SCRIPT);
		assertEquals("java.lang.ProcessBuilder$Redirect$Type",I_JSE_1_7_Lang.PROCESS_BUILDER_REDIRECT_TYPE);
		assertEquals("java.lang.Thread$State",I_JSE_1_7_Lang.THREAD_STATE);
		assertEquals("java.lang.ArithmeticException",I_JSE_1_7_Lang.ARITHMETIC_EXCEPTION);
		assertEquals("java.lang.ArrayIndexOutOfBoundsException",I_JSE_1_7_Lang.ARRAY_INDEX_OUT_OF_BOUNDS_EXCEPTION);
		assertEquals("java.lang.ArrayStoreException",I_JSE_1_7_Lang.ARRAY_STORE_EXCEPTION);
		assertEquals("java.lang.ClassCastException",I_JSE_1_7_Lang.CLASS_CAST_EXCEPTION);
		assertEquals("java.lang.ClassNotFoundException",I_JSE_1_7_Lang.CLASS_NOT_FOUND_EXCEPTION);
		assertEquals("java.lang.CloneNotSupportedException",I_JSE_1_7_Lang.CLONE_NOT_SUPPORTED_EXCEPTION);
		assertEquals("java.lang.EnumConstantNotPresentException",I_JSE_1_7_Lang.ENUM_CONSTANT_NOT_PRESENT_EXCEPTION);
		assertEquals("java.lang.Exception",I_JSE_1_7_Lang.EXCEPTION);
		assertEquals("java.lang.IllegalAccessException",I_JSE_1_7_Lang.ILLEGAL_ACCESS_EXCEPTION);
		assertEquals("java.lang.IllegalArgumentException",I_JSE_1_7_Lang.ILLEGAL_ARGUMENT_EXCEPTION);
		assertEquals("java.lang.IllegalMonitorStateException",I_JSE_1_7_Lang.ILLEGAL_MONITOR_STATE_EXCEPTION);
		assertEquals("java.lang.IllegalStateException",I_JSE_1_7_Lang.ILLEGAL_STATE_EXCEPTION);
		assertEquals("java.lang.IllegalThreadStateException",I_JSE_1_7_Lang.ILLEGAL_THREAD_STATE_EXCEPTION);
		assertEquals("java.lang.IndexOutOfBoundsException",I_JSE_1_7_Lang.INDEX_OUT_OF_BOUNDS_EXCEPTION);
		assertEquals("java.lang.InstantiationException",I_JSE_1_7_Lang.INSTANTIATION_EXCEPTION);
		assertEquals("java.lang.InterruptedException",I_JSE_1_7_Lang.INTERRUPTED_EXCEPTION);
		assertEquals("java.lang.NegativeArraySizeException",I_JSE_1_7_Lang.NEGATIVE_ARRAY_SIZE_EXCEPTION);
		assertEquals("java.lang.NoSuchFieldException",I_JSE_1_7_Lang.NO_SUCH_FIELD_EXCEPTION);
		assertEquals("java.lang.NoSuchMethodException",I_JSE_1_7_Lang.NO_SUCH_METHOD_EXCEPTION);
		assertEquals("java.lang.NullPointerException",I_JSE_1_7_Lang.NULL_POINTER_EXCEPTION);
		assertEquals("java.lang.NumberFormatException",I_JSE_1_7_Lang.NUMBER_FORMAT_EXCEPTION);
		assertEquals("java.lang.ReflectiveOperationException",I_JSE_1_7_Lang.REFLECTIVE_OPERATION_EXCEPTION);
		assertEquals("java.lang.RuntimeException",I_JSE_1_7_Lang.RUNTIME_EXCEPTION);
		assertEquals("java.lang.SecurityException",I_JSE_1_7_Lang.SECURITY_EXCEPTION);
		assertEquals("java.lang.StringIndexOutOfBoundsException",I_JSE_1_7_Lang.STRING_INDEX_OUT_OF_BOUNDS_EXCEPTION);
		assertEquals("java.lang.TypeNotPresentException",I_JSE_1_7_Lang.TYPE_NOT_PRESENT_EXCEPTION);
		assertEquals("java.lang.UnsupportedOperationException",I_JSE_1_7_Lang.UNSUPPORTED_OPERATION_EXCEPTION);
		assertEquals("java.lang.AbstractMethodError",I_JSE_1_7_Lang.ABSTRACT_METHOD_ERROR);
		assertEquals("java.lang.AssertionError",I_JSE_1_7_Lang.ASSERTION_ERROR);
		assertEquals("java.lang.BootstrapMethodError",I_JSE_1_7_Lang.BOOTSTRAP_METHOD_ERROR);
		assertEquals("java.lang.ClassCircularityError",I_JSE_1_7_Lang.CLASS_CIRCULARITY_ERROR);
		assertEquals("java.lang.ClassFormatError",I_JSE_1_7_Lang.CLASS_FORMAT_ERROR);
		assertEquals("java.lang.Error",I_JSE_1_7_Lang.ERROR);
		assertEquals("java.lang.ExceptionInInitializerError",I_JSE_1_7_Lang.EXCEPTION_IN_INITIALIZER_ERROR);
		assertEquals("java.lang.IllegalAccessError",I_JSE_1_7_Lang.ILLEGAL_ACCESS_ERROR);
		assertEquals("java.lang.IncompatibleClassChangeError",I_JSE_1_7_Lang.INCOMPATIBLE_CLASS_CHANGE_ERROR);
		assertEquals("java.lang.InstantiationError",I_JSE_1_7_Lang.INSTANTIATION_ERROR);
		assertEquals("java.lang.InternalError",I_JSE_1_7_Lang.INTERNAL_ERROR);
		assertEquals("java.lang.LinkageError",I_JSE_1_7_Lang.LINKAGE_ERROR);
		assertEquals("java.lang.NoClassDefFoundError",I_JSE_1_7_Lang.NO_CLASS_DEF_FOUND_ERROR);
		assertEquals("java.lang.NoSuchFieldError",I_JSE_1_7_Lang.NO_SUCH_FIELD_ERROR);
		assertEquals("java.lang.NoSuchMethodError",I_JSE_1_7_Lang.NO_SUCH_METHOD_ERROR);
		assertEquals("java.lang.OutOfMemoryError",I_JSE_1_7_Lang.OUT_OF_MEMORY_ERROR);
		assertEquals("java.lang.StackOverflowError",I_JSE_1_7_Lang.STACK_OVERFLOW_ERROR);
		assertEquals("java.lang.ThreadDeath",I_JSE_1_7_Lang.THREAD_DEATH);
		assertEquals("java.lang.UnknownError",I_JSE_1_7_Lang.UNKNOWN_ERROR);
		assertEquals("java.lang.UnsatisfiedLinkError",I_JSE_1_7_Lang.UNSATISFIED_LINK_ERROR);
		assertEquals("java.lang.UnsupportedClassVersionError",I_JSE_1_7_Lang.UNSUPPORTED_CLASS_VERSION_ERROR);
		assertEquals("java.lang.VerifyError",I_JSE_1_7_Lang.VERIFY_ERROR);
		assertEquals("java.lang.VirtualMachineError",I_JSE_1_7_Lang.VIRTUAL_MACHINE_ERROR);
		
		assertEquals("java.lang.Deprecated", I_JSE_1_7_Lang.DEPRECATED);
		assertEquals("java.lang.Override", I_JSE_1_7_Lang.OVERRIDE);		
		assertEquals("java.lang.SuppressWarnings", I_JSE_1_7_Lang.SUPPRESS_WARNINGS);
		assertEquals("java.lang.SafeVarargs", I_JSE_1_7_Lang.SAFE_VARARGS);
	}
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 103;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 103;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}
}
