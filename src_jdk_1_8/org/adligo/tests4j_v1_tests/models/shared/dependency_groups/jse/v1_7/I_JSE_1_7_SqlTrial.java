package org.adligo.tests4j_v1_tests.models.shared.dependency_groups.jse.v1_7;

import org.adligo.tests4j.models.shared.dependency_groups.jse.v1_7.I_JSE_1_7_Sql;
import org.adligo.tests4j.shared.asserts.dependency.AllowedDependencies;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.dependency_groups.Tests4J_JSE_v1_7_DependencyGroup;

@SourceFileScope (sourceClass=I_JSE_1_7_Sql.class)
@AllowedDependencies (groups=Tests4J_JSE_v1_7_DependencyGroup.class)
public class I_JSE_1_7_SqlTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.sql.Array",I_JSE_1_7_Sql.ARRAY);
		assertEquals("java.sql.Blob",I_JSE_1_7_Sql.BLOB);
		assertEquals("java.sql.CallableStatement",I_JSE_1_7_Sql.CALLABLE_STATEMENT);
		assertEquals("java.sql.Clob",I_JSE_1_7_Sql.CLOB);
		assertEquals("java.sql.Connection",I_JSE_1_7_Sql.CONNECTION);
		assertEquals("java.sql.DatabaseMetaData",I_JSE_1_7_Sql.DATABASE_META_DATA);
		assertEquals("java.sql.Driver",I_JSE_1_7_Sql.DRIVER);
		assertEquals("java.sql.NClob",I_JSE_1_7_Sql.NCLOB);
		assertEquals("java.sql.ParameterMetaData",I_JSE_1_7_Sql.PARAMETER_META_DATA);
		assertEquals("java.sql.PreparedStatement",I_JSE_1_7_Sql.PREPARED_STATEMENT);
		assertEquals("java.sql.Ref",I_JSE_1_7_Sql.REF);
		assertEquals("java.sql.ResultSet",I_JSE_1_7_Sql.RESULT_SET);
		assertEquals("java.sql.ResultSetMetaData",I_JSE_1_7_Sql.RESULT_SET_META_DATA);
		assertEquals("java.sql.RowId",I_JSE_1_7_Sql.ROW_ID);
		assertEquals("java.sql.Savepoint",I_JSE_1_7_Sql.SAVEPOINT);
		assertEquals("java.sql.SQLData",I_JSE_1_7_Sql.SQLDATA);
		assertEquals("java.sql.SQLInput",I_JSE_1_7_Sql.SQLINPUT);
		assertEquals("java.sql.SQLOutput",I_JSE_1_7_Sql.SQLOUTPUT);
		assertEquals("java.sql.SQLXML",I_JSE_1_7_Sql.SQLXML);
		assertEquals("java.sql.Statement",I_JSE_1_7_Sql.STATEMENT);
		assertEquals("java.sql.Struct",I_JSE_1_7_Sql.STRUCT);
		assertEquals("java.sql.Wrapper",I_JSE_1_7_Sql.WRAPPER);
		assertEquals("java.sql.Date",I_JSE_1_7_Sql.DATE);
		assertEquals("java.sql.DriverManager",I_JSE_1_7_Sql.DRIVER_MANAGER);
		assertEquals("java.sql.DriverPropertyInfo",I_JSE_1_7_Sql.DRIVER_PROPERTY_INFO);
		assertEquals("java.sql.SQLPermission",I_JSE_1_7_Sql.SQLPERMISSION);
		assertEquals("java.sql.Time",I_JSE_1_7_Sql.TIME);
		assertEquals("java.sql.Timestamp",I_JSE_1_7_Sql.TIMESTAMP);
		assertEquals("java.sql.Types",I_JSE_1_7_Sql.TYPES);
		assertEquals("java.sql.ClientInfoStatus",I_JSE_1_7_Sql.CLIENT_INFO_STATUS);
		assertEquals("java.sql.PseudoColumnUsage",I_JSE_1_7_Sql.PSEUDO_COLUMN_USAGE);
		assertEquals("java.sql.RowIdLifetime",I_JSE_1_7_Sql.ROW_ID_LIFETIME);
		assertEquals("java.sql.BatchUpdateException",I_JSE_1_7_Sql.BATCH_UPDATE_EXCEPTION);
		assertEquals("java.sql.DataTruncation",I_JSE_1_7_Sql.DATA_TRUNCATION);
		assertEquals("java.sql.SQLClientInfoException",I_JSE_1_7_Sql.SQLCLIENT_INFO_EXCEPTION);
		assertEquals("java.sql.SQLDataException",I_JSE_1_7_Sql.SQLDATA_EXCEPTION);
		assertEquals("java.sql.SQLException",I_JSE_1_7_Sql.SQLEXCEPTION);
		assertEquals("java.sql.SQLFeatureNotSupportedException",I_JSE_1_7_Sql.SQLFEATURE_NOT_SUPPORTED_EXCEPTION);
		assertEquals("java.sql.SQLIntegrityConstraintViolationException",I_JSE_1_7_Sql.SQLINTEGRITY_CONSTRAINT_VIOLATION_EXCEPTION);
		assertEquals("java.sql.SQLInvalidAuthorizationSpecException",I_JSE_1_7_Sql.SQLINVALID_AUTHORIZATION_SPEC_EXCEPTION);
		assertEquals("java.sql.SQLNonTransientConnectionException",I_JSE_1_7_Sql.SQLNON_TRANSIENT_CONNECTION_EXCEPTION);
		assertEquals("java.sql.SQLRecoverableException",I_JSE_1_7_Sql.SQLRECOVERABLE_EXCEPTION);
		assertEquals("java.sql.SQLSyntaxErrorException",I_JSE_1_7_Sql.SQLSYNTAX_ERROR_EXCEPTION);
		assertEquals("java.sql.SQLTimeoutException",I_JSE_1_7_Sql.SQLTIMEOUT_EXCEPTION);
		assertEquals("java.sql.SQLTransactionRollbackException",I_JSE_1_7_Sql.SQLTRANSACTION_ROLLBACK_EXCEPTION);
		assertEquals("java.sql.SQLTransientConnectionException",I_JSE_1_7_Sql.SQLTRANSIENT_CONNECTION_EXCEPTION);
		assertEquals("java.sql.SQLTransientException",I_JSE_1_7_Sql.SQLTRANSIENT_EXCEPTION);
		assertEquals("java.sql.SQLWarning",I_JSE_1_7_Sql.SQLWARNING);
	}
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 48;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 48;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
