package org.adligo.tests4j_v1_tests.models.shared.dependency_groups.jse.v1_7;

import org.adligo.tests4j.models.shared.dependency_groups.adligo.Tests4J_JSE_v1_7_DependencyGroup;
import org.adligo.tests4j.models.shared.dependency_groups.jse.v1_7.I_JSE_1_7_Util;
import org.adligo.tests4j.models.shared.trials.SourceFileScope;
import org.adligo.tests4j.models.shared.trials.Test;
import org.adligo.tests4j.shared.asserts.dependency.AllowedDependencies;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;

@SourceFileScope (sourceClass=I_JSE_1_7_Util.class)
@AllowedDependencies (groups=Tests4J_JSE_v1_7_DependencyGroup.class)
public class I_JSE_1_7_UtilTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.util.Collection",I_JSE_1_7_Util.COLLECTION);
		assertEquals("java.util.Comparator",I_JSE_1_7_Util.COMPARATOR);
		assertEquals("java.util.Deque",I_JSE_1_7_Util.DEQUE);
		assertEquals("java.util.Enumeration",I_JSE_1_7_Util.ENUMERATION);
		assertEquals("java.util.EventListener",I_JSE_1_7_Util.EVENT_LISTENER);
		assertEquals("java.util.Formattable",I_JSE_1_7_Util.FORMATTABLE);
		assertEquals("java.util.Iterator",I_JSE_1_7_Util.ITERATOR);
		assertEquals("java.util.List",I_JSE_1_7_Util.LIST);
		assertEquals("java.util.ListIterator",I_JSE_1_7_Util.LIST_ITERATOR);
		assertEquals("java.util.Map",I_JSE_1_7_Util.MAP);
		assertEquals("java.util.Map$Entry",I_JSE_1_7_Util.MAP_ENTRY);
		assertEquals("java.util.NavigableMap",I_JSE_1_7_Util.NAVIGABLE_MAP);
		assertEquals("java.util.NavigableSet",I_JSE_1_7_Util.NAVIGABLE_SET);
		assertEquals("java.util.Observer",I_JSE_1_7_Util.OBSERVER);
		assertEquals("java.util.Queue",I_JSE_1_7_Util.QUEUE);
		assertEquals("java.util.RandomAccess",I_JSE_1_7_Util.RANDOM_ACCESS);
		assertEquals("java.util.Set",I_JSE_1_7_Util.SET);
		assertEquals("java.util.SortedMap",I_JSE_1_7_Util.SORTED_MAP);
		assertEquals("java.util.SortedSet",I_JSE_1_7_Util.SORTED_SET);
		assertEquals("java.util.AbstractCollection",I_JSE_1_7_Util.ABSTRACT_COLLECTION);
		assertEquals("java.util.AbstractList",I_JSE_1_7_Util.ABSTRACT_LIST);
		assertEquals("java.util.AbstractMap",I_JSE_1_7_Util.ABSTRACT_MAP);
		assertEquals("java.util.AbstractMap$SimpleEntry",I_JSE_1_7_Util.ABSTRACT_MAP_SIMPLE_ENTRY);
		assertEquals("java.util.AbstractMap$SimpleImmutableEntry",I_JSE_1_7_Util.ABSTRACT_MAP_SIMPLE_IMMUTABLE_ENTRY);
		assertEquals("java.util.AbstractQueue",I_JSE_1_7_Util.ABSTRACT_QUEUE);
		assertEquals("java.util.AbstractSequentialList",I_JSE_1_7_Util.ABSTRACT_SEQUENTIAL_LIST);
		assertEquals("java.util.AbstractSet",I_JSE_1_7_Util.ABSTRACT_SET);
		assertEquals("java.util.ArrayQueue",I_JSE_1_7_Util.ARRAY_QUEUE);
		assertEquals("java.util.ArrayList",I_JSE_1_7_Util.ARRAY_LIST);
		assertEquals("java.util.Arrays",I_JSE_1_7_Util.ARRAYS);
		assertEquals("java.util.BitSet",I_JSE_1_7_Util.BIT_SET);
		assertEquals("java.util.Calendar",I_JSE_1_7_Util.CALENDAR);
		assertEquals("java.util.Collections",I_JSE_1_7_Util.COLLECTIONS);
		assertEquals("java.util.Currency",I_JSE_1_7_Util.CURRENCY);
		assertEquals("java.util.Date",I_JSE_1_7_Util.DATE);
		assertEquals("java.util.Dictionary",I_JSE_1_7_Util.DICTIONARY);
		assertEquals("java.util.EnumMap",I_JSE_1_7_Util.ENUM_MAP);
		assertEquals("java.util.EnumSet",I_JSE_1_7_Util.ENUM_SET);
		assertEquals("java.util.EventListenerProxy",I_JSE_1_7_Util.EVENT_LISTENER_PROXY);
		assertEquals("java.util.EventObject",I_JSE_1_7_Util.EVENT_OBJECT);
		assertEquals("java.util.FormattableFlags",I_JSE_1_7_Util.FORMATTABLE_FLAGS);
		assertEquals("java.util.Formatter",I_JSE_1_7_Util.FORMATTER);
		assertEquals("java.util.GregorianCalendar",I_JSE_1_7_Util.GREGORIAN_CALENDAR);
		assertEquals("java.util.HashMap",I_JSE_1_7_Util.HASH_MAP);
		assertEquals("java.util.HashSet",I_JSE_1_7_Util.HASH_SET);
		assertEquals("java.util.Hashtable",I_JSE_1_7_Util.HASHTABLE);
		assertEquals("java.util.IdentityHashMap",I_JSE_1_7_Util.IDENTITY_HASH_MAP);
		assertEquals("java.util.LinkedHashMap",I_JSE_1_7_Util.LINKED_HASH_MAP);
		assertEquals("java.util.LinkedHashSet",I_JSE_1_7_Util.LINKED_HASH_SET);
		assertEquals("java.util.LinkedList",I_JSE_1_7_Util.LINKED_LIST);
		assertEquals("java.util.ListResourceBundle",I_JSE_1_7_Util.LIST_RESOURCE_BUNDLE);
		assertEquals("java.util.Locale",I_JSE_1_7_Util.LOCALE);
		assertEquals("java.util.Locale$Builder",I_JSE_1_7_Util.LOCALE_BUILDER);
		assertEquals("java.util.Objects",I_JSE_1_7_Util.OBJECTS);
		assertEquals("java.util.Observable",I_JSE_1_7_Util.OBSERVABLE);
		assertEquals("java.util.PriorityQueue",I_JSE_1_7_Util.PRIORITY_QUEUE);
		assertEquals("java.util.Properties",I_JSE_1_7_Util.PROPERTIES);
		assertEquals("java.util.PropertyPermission",I_JSE_1_7_Util.PROPERTY_PERMISSION);
		assertEquals("java.util.PropertyResourceBundle",I_JSE_1_7_Util.PROPERTY_RESOURCE_BUNDLE);
		assertEquals("java.util.Random",I_JSE_1_7_Util.RANDOM);
		assertEquals("java.util.ResourceBundle",I_JSE_1_7_Util.RESOURCE_BUNDLE);
		assertEquals("java.util.ResourceBundle$Control",I_JSE_1_7_Util.RESOURCE_BUNDLE_CONTROL);
		assertEquals("java.util.Scanner",I_JSE_1_7_Util.SCANNER);
		assertEquals("java.util.ServiceLoader",I_JSE_1_7_Util.SERVICE_LOADER);
		assertEquals("java.util.SimpleTimeZone",I_JSE_1_7_Util.SIMPLE_TIME_ZONE);
		assertEquals("java.util.Stack",I_JSE_1_7_Util.STACK);
		assertEquals("java.util.StringTokenizer",I_JSE_1_7_Util.STRING_TOKENIZER);
		assertEquals("java.util.Timer",I_JSE_1_7_Util.TIMER);
		assertEquals("java.util.TimerTask",I_JSE_1_7_Util.TIMER_TASK);
		assertEquals("java.util.TimeZone",I_JSE_1_7_Util.TIME_ZONE);
		assertEquals("java.util.TreeMap",I_JSE_1_7_Util.TREE_MAP);
		assertEquals("java.util.TreeSet",I_JSE_1_7_Util.TREE_SET);
		assertEquals("java.util.UUID",I_JSE_1_7_Util.UUID);
		assertEquals("java.util.Vector",I_JSE_1_7_Util.VECTOR);
		assertEquals("java.util.WeakHashMap",I_JSE_1_7_Util.WEAK_HASH_MAP);
		assertEquals("java.util.Formatter$BigDecimalLayoutForm",I_JSE_1_7_Util.FORMATTER_BIG_DECIMAL_LAYOUT_FORM);
		assertEquals("java.util.Locale$Category",I_JSE_1_7_Util.LOCALE_CATEGORY);
		assertEquals("java.util.ConcurrentModificationException",I_JSE_1_7_Util.CONCURRENT_MODIFICATION_EXCEPTION);
		assertEquals("java.util.DuplicateFormatFlagsException",I_JSE_1_7_Util.DUPLICATE_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.EmptyStackException",I_JSE_1_7_Util.EMPTY_STACK_EXCEPTION);
		assertEquals("java.util.FormatFlagsConversionMismatchException",I_JSE_1_7_Util.FORMAT_FLAGS_CONVERSION_MISMATCH_EXCEPTION);
		assertEquals("java.util.FormatterClosedException",I_JSE_1_7_Util.FORMATTER_CLOSED_EXCEPTION);
		assertEquals("java.util.IllegalFormatCodePointException",I_JSE_1_7_Util.ILLEGAL_FORMAT_CODE_POINT_EXCEPTION);
		assertEquals("java.util.IllegalFormatConversionException",I_JSE_1_7_Util.ILLEGAL_FORMAT_CONVERSION_EXCEPTION);
		assertEquals("java.util.IllegalFormatException",I_JSE_1_7_Util.ILLEGAL_FORMAT_EXCEPTION);
		assertEquals("java.util.IllegalFormatFlagsException",I_JSE_1_7_Util.ILLEGAL_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.IllegalFormatPrecisionException",I_JSE_1_7_Util.ILLEGAL_FORMAT_PRECISION_EXCEPTION);
		assertEquals("java.util.IllegalFormatWidthException",I_JSE_1_7_Util.ILLEGAL_FORMAT_WIDTH_EXCEPTION);
		assertEquals("java.util.IllformedLocaleException",I_JSE_1_7_Util.ILLFORMED_LOCALE_EXCEPTION);
		assertEquals("java.util.InputMismatchException",I_JSE_1_7_Util.INPUT_MISMATCH_EXCEPTION);
		assertEquals("java.util.InvalidPropertiesFormatException",I_JSE_1_7_Util.INVALID_PROPERTIES_FORMAT_EXCEPTION);
		assertEquals("java.util.MissingFormatArgumentException",I_JSE_1_7_Util.MISSING_FORMAT_ARGUMENT_EXCEPTION);
		assertEquals("java.util.MissingFormatWidthException",I_JSE_1_7_Util.MISSING_FORMAT_WIDTH_EXCEPTION);
		assertEquals("java.util.MissingResourceException",I_JSE_1_7_Util.MISSING_RESOURCE_EXCEPTION);
		assertEquals("java.util.NoSuchElementException",I_JSE_1_7_Util.NO_SUCH_ELEMENT_EXCEPTION);
		assertEquals("java.util.TooManyListenersException",I_JSE_1_7_Util.TOO_MANY_LISTENERS_EXCEPTION);
		assertEquals("java.util.UnknownFormatConversionException",I_JSE_1_7_Util.UNKNOWN_FORMAT_CONVERSION_EXCEPTION);
		assertEquals("java.util.UnknownFormatFlagsException",I_JSE_1_7_Util.UNKNOWN_FORMAT_FLAGS_EXCEPTION);
		assertEquals("java.util.ServiceConfigurationError",I_JSE_1_7_Util.SERVICE_CONFIGURATION_ERROR);
	}
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 99;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 99;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
