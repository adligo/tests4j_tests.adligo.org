package org.adligo.tests4j_v1_tests.models.shared.dependency_groups.gwt.v2_6.util;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;

/** autogenerated by org.adligo.tests4j.gen.dependency_groups.ClassUseGen*/
@SuppressWarnings("rawtypes")
public class Collections_2_6_MockUse {

	
	public java.util.List obj0 = Collections.EMPTY_LIST;
	public java.util.Map obj1 = Collections.EMPTY_MAP;
	public java.util.Set obj2 = Collections.EMPTY_SET;
	public Collections_2_6_MockUse() {
		callCollectionsMethods();
	}

	@SuppressWarnings({ "unchecked" })
	public void callCollectionsMethods() {
		Collections.addAll(new ArrayList(), new ArrayList());
		Collections.disjoint(new ArrayList(), new ArrayList());
		Collections.replaceAll(new ArrayList(), new Object(), new Object());
		Collections.binarySearch(new ArrayList(), new Object());
		Collections.binarySearch(new ArrayList(), new Object(), null);
		Collections.frequency(new ArrayList(), new Object());
		
		ArrayList<Integer> in = new ArrayList<Integer>();
		in.add(1);
		in.add(2);
		in.add(4);
		Collections.max(in);
		Collections.max(in, new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Collections.min(in);
		Collections.min(in, new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Collections.list(new Vector<Object>().elements());
		Collections.unmodifiableCollection(new ArrayList());
		Collections.reverseOrder();
		Collections.reverseOrder(new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Collections.enumeration(new ArrayList());
		Collections.emptyList();
		Collections.nCopies(2, new Object());
		Collections.singletonList(new Object());
		Collections.unmodifiableList(new ArrayList());
		Collections.emptyListIterator();
		Collections.emptyMap();
		Collections.singletonMap(new Object(), new Object());
		Collections.unmodifiableMap(new HashMap());
		Collections.emptySet();
		Collections.singleton(new Object());
		Collections.unmodifiableSet(new HashSet());
		Collections.unmodifiableSortedMap(new TreeMap());
		Collections.unmodifiableSortedSet(new TreeSet<Object>());
		Collections.copy(new ArrayList(), new ArrayList());
		Collections.fill(new ArrayList(), new Object());
		Collections.reverse(new ArrayList());
		Collections.sort(new ArrayList());
		Collections.sort(new ArrayList(), new Comparator<Object>() {

			@Override
			public int compare(Object o1, Object o2) {
				// TODO Auto-generated method stub
				return 0;
			}
		});
		Collections.swap(in, 0, 1);
	}
}
