package org.adligo.tests4j_tests;

import java.util.ArrayList;
import java.util.List;

import org.adligo.tests4j.run.discovery.PackageDiscovery;
import org.adligo.tests4j_tests.trials_api.bad_mock_source_file_trials.NoSourceFileScopeAnnotationTrial;

public class PackageClassNameWriter {

	public static void main(String [] args) {
		try {
			System.out.println("//autogenerated by " + PackageClassNameWriter.class.getName());
			List<String> classNames =  new ArrayList<String>();
			addJavaLang(classNames);
			String packageConstName = "JSE_1_7_Lang";
			
			for (String className: classNames) {
				System.out.println("\tpublic static final String " + 
						toUpperWithUnderscore(Class.forName(className)) +
						" = \"" + className + "\";");
			}
			for (String className: classNames) {
				System.out.println("\tassertEquals(\"" + 
						className +
						"\"," + packageConstName + "." + toUpperWithUnderscore(Class.forName(className)) + ");");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private static String toUpperWithUnderscore(Class<?> clazz) {
		String name = clazz.getName();
		if (name.indexOf("$") == -1) {
			name = clazz.getSimpleName();
		} else {
			name = name.substring(name.lastIndexOf("."), name.length());
		}
		char [] chars = name.toCharArray();
		StringBuilder sb = new StringBuilder();
		
		boolean lastUpper = false;
		boolean lastLower = false;
		for (int i = 0; i < chars.length; i++) {
			char c = chars[i];
			if (Character.isUpperCase(c)) {
				if (lastLower) {
					sb.append("_");
				}
				sb.append(c);
				lastUpper = true;
				lastLower = false;
			} else if (Character.isLowerCase(c)) {
				sb.append(Character.toUpperCase(c));
				lastLower = true;
			} else if (c == '$' || c == '.'){
				
			} else {
				sb.append(c);
			}
		}
		return sb.toString();
	}
	
	private static void addJavaLang(List<String> names) {
		add(names, Appendable.class);
		add(names, AutoCloseable.class);
		
		add(names, CharSequence.class);
		add(names, Cloneable.class);
		add(names, Comparable.class);
		
		add(names, Iterable.class);
		
		add(names, Readable.class);
		add(names, Runnable.class);
		
		add(names, Thread.UncaughtExceptionHandler.class);
		//classes
		add(names, Boolean.class);
		add(names, Byte.class);
		
		add(names, Character.class);
		add(names, Character.Subset.class);
		add(names, Character.UnicodeBlock.class);
		add(names, Class.class);
		add(names, ClassLoader.class);
		add(names, ClassValue.class);
		add(names, Compiler.class);
		
		add(names, Double.class);
		
		add(names, Enum.class);
		
		add(names, Float.class);
		
		add(names, InheritableThreadLocal.class);
		add(names, Integer.class);
		
		add(names, Long.class);
		
		add(names, Math.class);
		
		add(names, Number.class);
		
		add(names, Object.class);
		
		add(names, Package.class);
		add(names, Process.class);
		add(names, ProcessBuilder.class);
		add(names, ProcessBuilder.Redirect.class);
		
		add(names, Runtime.class);
		add(names, RuntimePermission.class);
		
		add(names, SecurityManager.class);
		add(names, Short.class);
		add(names, StackTraceElement.class);
		add(names, StrictMath.class);
		add(names, String.class);
		add(names, StringBuffer.class);
		add(names, StringBuilder.class);
		add(names, System.class);
		
		add(names, Thread.class);
		add(names, ThreadGroup.class);
		add(names, ThreadLocal.class);
		add(names, Throwable.class);
		
		add(names, Void.class);
		
		//enums
		add(names, Character.UnicodeScript.class);
		add(names, ProcessBuilder.Redirect.Type.class);
		add(names, Thread.State.class);
		
		//exceptions
		add(names, ArithmeticException.class);
		add(names, ArrayIndexOutOfBoundsException.class);
		add(names, ArrayStoreException.class);
		
		add(names, ClassCastException.class);
		add(names, ClassNotFoundException.class);
		add(names, CloneNotSupportedException.class);
		
		add(names, EnumConstantNotPresentException.class);
		add(names, Exception.class);
		
		add(names, IllegalAccessException.class);
		add(names, IllegalArgumentException.class);
		add(names, IllegalMonitorStateException.class);
		add(names, IllegalStateException.class);
		add(names, IllegalThreadStateException.class);
		add(names, IndexOutOfBoundsException.class);
		add(names, InstantiationException.class);
		add(names, InterruptedException.class);
		
		add(names, NegativeArraySizeException.class);
		add(names, NoSuchFieldException.class);
		add(names, NoSuchMethodException.class);
		add(names, NullPointerException.class);
		add(names, NumberFormatException.class);
		
		add(names, ReflectiveOperationException.class);
		add(names, RuntimeException.class);
		
		add(names, SecurityException.class);
		add(names, StringIndexOutOfBoundsException.class);
		
		add(names, TypeNotPresentException.class);
		
		add(names, UnsupportedOperationException.class);
		
		//errors
		add(names, AbstractMethodError.class);
		add(names, AssertionError.class);
		
		add(names, BootstrapMethodError.class);
		
		add(names, ClassCircularityError.class);
		add(names, ClassFormatError.class);
		
		add(names, Error.class);
		add(names, ExceptionInInitializerError.class);
		
		add(names, IllegalAccessError.class);
		add(names, IncompatibleClassChangeError.class);
		add(names, InstantiationError.class);
		add(names, InternalError.class);
		
		add(names, LinkageError.class);
		
		add(names, NoClassDefFoundError.class);
		add(names, NoSuchFieldError.class);
		add(names, NoSuchMethodError.class);
		
		add(names, OutOfMemoryError.class);
		
		add(names, StackOverflowError.class);
		
		add(names, ThreadDeath.class);
		
		add(names, UnknownError.class);
		add(names, UnsatisfiedLinkError.class);
		add(names, UnsupportedClassVersionError.class);
		
		add(names, VerifyError.class);
		add(names, VirtualMachineError.class);
	}
	
	private static void add(List<String> names, Class<?> c) {
		names.add(c.getName());
	}
}
