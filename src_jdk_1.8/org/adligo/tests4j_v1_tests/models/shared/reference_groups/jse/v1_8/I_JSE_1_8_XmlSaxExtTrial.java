package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse.v1_8;

import org.adligo.tests4j.models.shared.reference_groups.jse.v1_8.I_JSE_1_8_XmlSaxExt;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_v1_8_GwtReferenceGroup;

@SourceFileScope (sourceClass=I_JSE_1_8_XmlSaxExt.class)
@AllowedReferences (groups=Tests4J_JSE_v1_8_GwtReferenceGroup.class)
public class I_JSE_1_8_XmlSaxExtTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {

		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
	  assertEquals("org.xml.sax.ext.Attributes2",I_JSE_1_8_XmlSaxExt.ATTRIBUTES2);
	  assertEquals("org.xml.sax.ext.DeclHandler",I_JSE_1_8_XmlSaxExt.DECL_HANDLER);
	  assertEquals("org.xml.sax.ext.LexicalHandler",I_JSE_1_8_XmlSaxExt.LEXICAL_HANDLER);
	  assertEquals("org.xml.sax.ext.Locator2",I_JSE_1_8_XmlSaxExt.LOCATOR2);
	  assertEquals("org.xml.sax.ext.Attributes2Impl",I_JSE_1_8_XmlSaxExt.ATTRIBUTES2_IMPL);
	  assertEquals("org.xml.sax.ext.DefaultHandler2",I_JSE_1_8_XmlSaxExt.DEFAULT_HANDLER2);
	  assertEquals("org.xml.sax.ext.Locator2Impl",I_JSE_1_8_XmlSaxExt.LOCATOR2_IMPL);
	}

	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 7;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 7;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
