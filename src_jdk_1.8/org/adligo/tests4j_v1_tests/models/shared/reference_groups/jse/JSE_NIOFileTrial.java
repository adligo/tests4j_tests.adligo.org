package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse;

import org.adligo.tests4j.models.shared.reference_groups.jse.JSE_NIO;
import org.adligo.tests4j.models.shared.reference_groups.jse.JSE_NIOFile;
import org.adligo.tests4j.shared.asserts.common.I_Asserts;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.shared.asserts.reference.ReferenceGroupBaseDelegate;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_GwtReferenceGroup;

@SourceFileScope (sourceClass=JSE_NIOFile.class,minCoverage=97)
@AllowedReferences (groups=Tests4J_JSE_GwtReferenceGroup.class)
public class JSE_NIOFileTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
	  assertEquals("java.nio.file.DirectoryStream",JSE_NIOFile.DIRECTORY_STREAM);
	  assertEquals("java.nio.file.DirectoryStream$Filter",JSE_NIOFile.FILTER);
	  assertEquals("java.nio.file.FileVisitor",JSE_NIOFile.FILE_VISITOR);
	  assertEquals("java.nio.file.OpenOption",JSE_NIOFile.OPEN_OPTION);
	  assertEquals("java.nio.file.Path",JSE_NIOFile.PATH);
	  assertEquals("java.nio.file.PathMatcher",JSE_NIOFile.PATH_MATCHER);
	  assertEquals("java.nio.file.SecureDirectoryStream",JSE_NIOFile.SECURE_DIRECTORY_STREAM);
	  assertEquals("java.nio.file.Watchable",JSE_NIOFile.WATCHABLE);
	  assertEquals("java.nio.file.WatchEvent",JSE_NIOFile.WATCH_EVENT);
	  assertEquals("java.nio.file.WatchEvent$Kind",JSE_NIOFile.KIND);
	  assertEquals("java.nio.file.WatchEvent$Modifier",JSE_NIOFile.MODIFIER);
	  assertEquals("java.nio.file.WatchKey",JSE_NIOFile.WATCH_KEY);
	  assertEquals("java.nio.file.WatchService",JSE_NIOFile.WATCH_SERVICE);
	  assertEquals("java.nio.file.Files",JSE_NIOFile.FILES);
	  assertEquals("java.nio.file.FileStore",JSE_NIOFile.FILE_STORE);
	  assertEquals("java.nio.file.FileSystem",JSE_NIOFile.FILE_SYSTEM);
	  assertEquals("java.nio.file.FileSystems",JSE_NIOFile.FILE_SYSTEMS);
	  assertEquals("java.nio.file.LinkPermission",JSE_NIOFile.LINK_PERMISSION);
	  assertEquals("java.nio.file.Paths",JSE_NIOFile.PATHS);
	  assertEquals("java.nio.file.SimpleFileVisitor",JSE_NIOFile.SIMPLE_FILE_VISITOR);
	  assertEquals("java.nio.file.StandardWatchEventKinds",JSE_NIOFile.STANDARD_WATCH_EVENT_KINDS);
	  assertEquals("java.nio.file.AccessMode",JSE_NIOFile.ACCESS_MODE);
	  assertEquals("java.nio.file.FileVisitOption",JSE_NIOFile.FILE_VISIT_OPTION);
	  assertEquals("java.nio.file.FileVisitResult",JSE_NIOFile.FILE_VISIT_RESULT);
	  assertEquals("java.nio.file.LinkOption",JSE_NIOFile.LINK_OPTION);
	  assertEquals("java.nio.file.StandardCopyOption",JSE_NIOFile.STANDARD_COPY_OPTION);
	  assertEquals("java.nio.file.StandardOpenOption",JSE_NIOFile.STANDARD_OPEN_OPTION);
	  assertEquals("java.nio.file.AccessDeniedException",JSE_NIOFile.ACCESS_DENIED_EXCEPTION);
	  assertEquals("java.nio.file.AtomicMoveNotSupportedException",JSE_NIOFile.ATOMIC_MOVE_NOT_SUPPORTED_EXCEPTION);
	  assertEquals("java.nio.file.ClosedDirectoryStreamException",JSE_NIOFile.CLOSED_DIRECTORY_STREAM_EXCEPTION);
	  assertEquals("java.nio.file.ClosedFileSystemException",JSE_NIOFile.CLOSED_FILE_SYSTEM_EXCEPTION);
	  assertEquals("java.nio.file.ClosedWatchServiceException",JSE_NIOFile.CLOSED_WATCH_SERVICE_EXCEPTION);
	  assertEquals("java.nio.file.DirectoryIteratorException",JSE_NIOFile.DIRECTORY_ITERATOR_EXCEPTION);
	  assertEquals("java.nio.file.DirectoryNotEmptyException",JSE_NIOFile.DIRECTORY_NOT_EMPTY_EXCEPTION);
	  assertEquals("java.nio.file.FileAlreadyExistsException",JSE_NIOFile.FILE_ALREADY_EXISTS_EXCEPTION);
	  assertEquals("java.nio.file.FileSystemAlreadyExistsException",JSE_NIOFile.FILE_SYSTEM_ALREADY_EXISTS_EXCEPTION);
	  assertEquals("java.nio.file.FileSystemException",JSE_NIOFile.FILE_SYSTEM_EXCEPTION);
	  assertEquals("java.nio.file.FileSystemLoopException",JSE_NIOFile.FILE_SYSTEM_LOOP_EXCEPTION);
	  assertEquals("java.nio.file.FileSystemNotFoundException",JSE_NIOFile.FILE_SYSTEM_NOT_FOUND_EXCEPTION);
	  assertEquals("java.nio.file.InvalidPathException",JSE_NIOFile.INVALID_PATH_EXCEPTION);
	  assertEquals("java.nio.file.NoSuchFileException",JSE_NIOFile.NO_SUCH_FILE_EXCEPTION);
	  assertEquals("java.nio.file.NotDirectoryException",JSE_NIOFile.NOT_DIRECTORY_EXCEPTION);
	  assertEquals("java.nio.file.NotLinkException",JSE_NIOFile.NOT_LINK_EXCEPTION);
	  assertEquals("java.nio.file.ProviderMismatchException",JSE_NIOFile.PROVIDER_MISMATCH_EXCEPTION);
	  assertEquals("java.nio.file.ProviderNotFoundException",JSE_NIOFile.PROVIDER_NOT_FOUND_EXCEPTION);
	  assertEquals("java.nio.file.ReadOnlyFileSystemException",JSE_NIOFile.READ_ONLY_FILE_SYSTEM_EXCEPTION);
	  assertEquals("java.nio.file", JSE_NIOFile.JAVA_NIO_FILE);
	  assertEquals("java.nio.file", JSE_NIOFile.INSTANCE.getPackageName());
	  
	  assertJSE_NIOFile(this, JSE_NIOFile.INSTANCE);
	  assertEquals("COPY_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.CopyOption"));
    assertEquals("DIRECTORY_STREAM",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.DirectoryStream"));
    assertEquals("FILTER",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.DirectoryStream$Filter"));
    assertEquals("FILE_VISITOR",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileVisitor"));
    assertEquals("OPEN_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.OpenOption"));
    assertEquals("PATH",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.Path"));
    assertEquals("PATH_MATCHER",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.PathMatcher"));
    assertEquals("SECURE_DIRECTORY_STREAM",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.SecureDirectoryStream"));
    assertEquals("WATCHABLE",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.Watchable"));
    assertEquals("WATCH_EVENT",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.WatchEvent"));
    assertEquals("KIND",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.WatchEvent$Kind"));
    assertEquals("MODIFIER",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.WatchEvent$Modifier"));
    assertEquals("WATCH_KEY",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.WatchKey"));
    assertEquals("WATCH_SERVICE",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.WatchService"));
    assertEquals("FILES",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.Files"));
    assertEquals("FILE_STORE",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileStore"));
    assertEquals("FILE_SYSTEM",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystem"));
    assertEquals("FILE_SYSTEMS",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystems"));
    assertEquals("LINK_PERMISSION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.LinkPermission"));
    assertEquals("PATHS",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.Paths"));
    assertEquals("SIMPLE_FILE_VISITOR",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.SimpleFileVisitor"));
    assertEquals("STANDARD_WATCH_EVENT_KINDS",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.StandardWatchEventKinds"));
    assertEquals("ACCESS_MODE",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.AccessMode"));
    assertEquals("FILE_VISIT_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileVisitOption"));
    assertEquals("FILE_VISIT_RESULT",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileVisitResult"));
    assertEquals("LINK_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.LinkOption"));
    assertEquals("STANDARD_COPY_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.StandardCopyOption"));
    assertEquals("STANDARD_OPEN_OPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.StandardOpenOption"));
    assertEquals("ACCESS_DENIED_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.AccessDeniedException"));
    assertEquals("ATOMIC_MOVE_NOT_SUPPORTED_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.AtomicMoveNotSupportedException"));
    assertEquals("CLOSED_DIRECTORY_STREAM_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ClosedDirectoryStreamException"));
    assertEquals("CLOSED_FILE_SYSTEM_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ClosedFileSystemException"));
    assertEquals("CLOSED_WATCH_SERVICE_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ClosedWatchServiceException"));
    assertEquals("DIRECTORY_ITERATOR_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.DirectoryIteratorException"));
    assertEquals("DIRECTORY_NOT_EMPTY_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.DirectoryNotEmptyException"));
    assertEquals("FILE_ALREADY_EXISTS_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileAlreadyExistsException"));
    assertEquals("FILE_SYSTEM_ALREADY_EXISTS_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystemAlreadyExistsException"));
    assertEquals("FILE_SYSTEM_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystemException"));
    assertEquals("FILE_SYSTEM_LOOP_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystemLoopException"));
    assertEquals("FILE_SYSTEM_NOT_FOUND_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.FileSystemNotFoundException"));
    assertEquals("INVALID_PATH_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.InvalidPathException"));
    assertEquals("NO_SUCH_FILE_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.NoSuchFileException"));
    assertEquals("NOT_DIRECTORY_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.NotDirectoryException"));
    assertEquals("NOT_LINK_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.NotLinkException"));
    assertEquals("PROVIDER_MISMATCH_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ProviderMismatchException"));
    assertEquals("PROVIDER_NOT_FOUND_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ProviderNotFoundException"));
    assertEquals("READ_ONLY_FILE_SYSTEM_EXCEPTION",JSE_NIOFile.INSTANCE.getConstantName("java.nio.file.ReadOnlyFileSystemException"));
	}
	
	public static void assertJSE_NIOFile(I_Asserts asserts, ReferenceGroupBaseDelegate dg) {
	  asserts.assertTrue(dg.isInGroup("java.nio.file.CopyOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.DirectoryStream"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.DirectoryStream$Filter"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileVisitor"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.OpenOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.Path"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.PathMatcher"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.SecureDirectoryStream"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.Watchable"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.WatchEvent"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.WatchEvent$Kind"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.WatchEvent$Modifier"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.WatchKey"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.WatchService"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.Files"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileStore"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystem"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystems"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.LinkPermission"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.Paths"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.SimpleFileVisitor"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.StandardWatchEventKinds"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.AccessMode"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileVisitOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileVisitResult"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.LinkOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.StandardCopyOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.StandardOpenOption"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.AccessDeniedException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.AtomicMoveNotSupportedException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ClosedDirectoryStreamException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ClosedFileSystemException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ClosedWatchServiceException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.DirectoryIteratorException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.DirectoryNotEmptyException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileAlreadyExistsException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystemAlreadyExistsException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystemException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystemLoopException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.FileSystemNotFoundException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.InvalidPathException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.NoSuchFileException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.NotDirectoryException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.NotLinkException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ProviderMismatchException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ProviderNotFoundException"));
    asserts.assertTrue(dg.isInGroup("java.nio.file.ReadOnlyFileSystemException"));
	}
	
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 142;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 95;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
