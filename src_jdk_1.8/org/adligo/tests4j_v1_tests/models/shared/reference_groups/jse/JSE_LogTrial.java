package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse;

import org.adligo.tests4j.models.shared.reference_groups.jse.JSE_Log;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_GwtReferenceGroup;

@SourceFileScope (sourceClass=JSE_Log.class,minCoverage=93.0)
@AllowedReferences (groups=Tests4J_JSE_GwtReferenceGroup.class)
public class JSE_LogTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.util.logging.Filter",JSE_Log.FILTER);
		assertEquals("java.util.logging.ConsoleHandler",JSE_Log.CONSOLE_HANDLER);
		assertEquals("java.util.logging.ErrorManager",JSE_Log.ERROR_MANAGER);
		assertEquals("java.util.logging.FileHandler",JSE_Log.FILE_HANDLER);
		assertEquals("java.util.logging.Formatter",JSE_Log.FORMATTER);
		assertEquals("java.util.logging.Handler",JSE_Log.HANDLER);
		assertEquals("java.util.logging.Level",JSE_Log.LEVEL);
		assertEquals("java.util.logging.Logger",JSE_Log.LOGGER);
		assertEquals("java.util.logging.LoggingPermission",JSE_Log.LOGGING_PERMISSION);
		assertEquals("java.util.logging.LogManager",JSE_Log.LOG_MANAGER);
		assertEquals("java.util.logging.LogRecord",JSE_Log.LOG_RECORD);
		assertEquals("java.util.logging.MemoryHandler",JSE_Log.MEMORY_HANDLER);
		assertEquals("java.util.logging.SimpleFormatter",JSE_Log.SIMPLE_FORMATTER);
		assertEquals("java.util.logging.SocketHandler",JSE_Log.SOCKET_HANDLER);
		assertEquals("java.util.logging.StreamHandler",JSE_Log.STREAM_HANDLER);
		assertEquals("java.util.logging.XMLFormatter",JSE_Log.XMLFORMATTER);
		assertEquals(JSE_Log.class.getName(), JSE_Log.INSTANCE.getClass().getName());
		
    assertEquals("FILTER",JSE_Log.INSTANCE.getConstantName("java.util.logging.Filter"));
    assertEquals("CONSOLE_HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.ConsoleHandler"));
    assertEquals("ERROR_MANAGER",JSE_Log.INSTANCE.getConstantName("java.util.logging.ErrorManager"));
    assertEquals("FILE_HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.FileHandler"));
    assertEquals("FORMATTER",JSE_Log.INSTANCE.getConstantName("java.util.Formatter"));
    assertEquals("HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.Handler"));
    assertEquals("LEVEL",JSE_Log.INSTANCE.getConstantName("java.util.logging.Level"));
    assertEquals("LOGGER",JSE_Log.INSTANCE.getConstantName("java.util.logging.Logger"));
    assertEquals("LOGGING_PERMISSION",JSE_Log.INSTANCE.getConstantName("java.util.logging.LoggingPermission"));
    assertEquals("LOG_MANAGER",JSE_Log.INSTANCE.getConstantName("java.util.logging.LogManager"));
    assertEquals("LOG_RECORD",JSE_Log.INSTANCE.getConstantName("java.util.logging.LogRecord"));
    assertEquals("MEMORY_HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.MemoryHandler"));
    assertEquals("SIMPLE_FORMATTER",JSE_Log.INSTANCE.getConstantName("java.util.logging.SimpleFormatter"));
    assertEquals("SOCKET_HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.SocketHandler"));
    assertEquals("STREAM_HANDLER",JSE_Log.INSTANCE.getConstantName("java.util.logging.StreamHandler"));
    assertEquals("XMLFORMATTER",JSE_Log.INSTANCE.getConstantName("java.util.logging.XMLFormatter"));
	}
	
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 33;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 33;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
