package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse;

import org.adligo.tests4j.models.shared.reference_groups.jse.JSE_NIO;
import org.adligo.tests4j.shared.asserts.common.I_Asserts;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.shared.asserts.reference.ReferenceGroupBaseDelegate;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_GwtReferenceGroup;

import java.util.Set;

@SourceFileScope (sourceClass=JSE_NIO.class,minCoverage=97)
@AllowedReferences (groups=Tests4J_JSE_GwtReferenceGroup.class)
public class JSE_NIOTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
	  assertEquals("java.nio.Buffer",JSE_NIO.BUFFER);
	  assertEquals("java.nio.ByteBuffer",JSE_NIO.BYTE_BUFFER);
	  assertEquals("java.nio.ByteOrder",JSE_NIO.BYTE_ORDER);
	  assertEquals("java.nio.CharBuffer",JSE_NIO.CHAR_BUFFER);
	  assertEquals("java.nio.DoubleBuffer",JSE_NIO.DOUBLE_BUFFER);
	  assertEquals("java.nio.FloatBuffer",JSE_NIO.FLOAT_BUFFER);
	  assertEquals("java.nio.IntBuffer",JSE_NIO.INT_BUFFER);
	  assertEquals("java.nio.LongBuffer",JSE_NIO.LONG_BUFFER);
	  assertEquals("java.nio.MappedByteBuffer",JSE_NIO.MAPPED_BYTE_BUFFER);
	  assertEquals("java.nio.ShortBuffer",JSE_NIO.SHORT_BUFFER);
	  assertEquals("java.nio.BufferOverflowException",JSE_NIO.BUFFER_OVERFLOW_EXCEPTION);
	  assertEquals("java.nio.BufferUnderflowException",JSE_NIO.BUFFER_UNDERFLOW_EXCEPTION);
	  assertEquals("java.nio.InvalidMarkException",JSE_NIO.INVALID_MARK_EXCEPTION);
	  assertEquals("java.nio.ReadOnlyBufferException",JSE_NIO.READ_ONLY_BUFFER_EXCEPTION);
	  assertEquals("java.nio", JSE_NIO.JAVA_NIO);
	  assertEquals("java.nio", JSE_NIO.INSTANCE.getPackageName());
	  
	  assertJSE_NIO(this, JSE_NIO.INSTANCE);
    assertEquals("BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.Buffer"));
    assertEquals("BYTE_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.ByteBuffer"));
    assertEquals("BYTE_ORDER",JSE_NIO.INSTANCE.getConstantName("java.nio.ByteOrder"));
    assertEquals("CHAR_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.CharBuffer"));
    assertEquals("DOUBLE_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.DoubleBuffer"));
    assertEquals("FLOAT_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.FloatBuffer"));
    assertEquals("INT_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.IntBuffer"));
    assertEquals("LONG_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.LongBuffer"));
    assertEquals("MAPPED_BYTE_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.MappedByteBuffer"));
    assertEquals("SHORT_BUFFER",JSE_NIO.INSTANCE.getConstantName("java.nio.ShortBuffer"));
    assertEquals("BUFFER_OVERFLOW_EXCEPTION",JSE_NIO.INSTANCE.getConstantName("java.nio.BufferOverflowException"));
    assertEquals("BUFFER_UNDERFLOW_EXCEPTION",JSE_NIO.INSTANCE.getConstantName("java.nio.BufferUnderflowException"));
    assertEquals("INVALID_MARK_EXCEPTION",JSE_NIO.INSTANCE.getConstantName("java.nio.InvalidMarkException"));
    assertEquals("READ_ONLY_BUFFER_EXCEPTION",JSE_NIO.INSTANCE.getConstantName("java.nio.ReadOnlyBufferException"));
	}
	
	public static void assertJSE_NIO(I_Asserts asserts, ReferenceGroupBaseDelegate rg) {
	  Set<String> classNames = rg.getClassNames();
	  asserts.assertTrue(rg.isInGroup("java.nio.Buffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.ByteBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.ByteOrder"));
    asserts.assertTrue(rg.isInGroup("java.nio.CharBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.DoubleBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.FloatBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.IntBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.LongBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.MappedByteBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.ShortBuffer"));
    asserts.assertTrue(rg.isInGroup("java.nio.BufferOverflowException"));
    asserts.assertTrue(rg.isInGroup("java.nio.BufferUnderflowException"));
    asserts.assertTrue(rg.isInGroup("java.nio.InvalidMarkException"));
    asserts.assertTrue(rg.isInGroup("java.nio.ReadOnlyBufferException"));
	}
	
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 44;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 30;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
