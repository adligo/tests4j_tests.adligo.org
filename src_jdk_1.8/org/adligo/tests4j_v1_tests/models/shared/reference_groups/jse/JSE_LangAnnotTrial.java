package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse;

import org.adligo.tests4j.models.shared.reference_groups.jse.JSE_LangAnnot;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_GwtReferenceGroup;

@SourceFileScope (sourceClass=JSE_LangAnnot.class,minCoverage=91.0)
@AllowedReferences (groups=Tests4J_JSE_GwtReferenceGroup.class)
public class JSE_LangAnnotTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
		assertEquals("java.lang.annotation.Annotation",JSE_LangAnnot.ANNOTATION);
		assertEquals("java.lang.annotation.ElementType",JSE_LangAnnot.ELEMENT_TYPE);
		assertEquals("java.lang.annotation.RetentionPolicy",JSE_LangAnnot.RETENTION_POLICY);
		assertEquals("java.lang.annotation.AnnotationTypeMismatchException",JSE_LangAnnot.ANNOTATION_TYPE_MISMATCH_EXCEPTION);
		assertEquals("java.lang.annotation.IncompleteAnnotationException",JSE_LangAnnot.INCOMPLETE_ANNOTATION_EXCEPTION);
		assertEquals("java.lang.annotation.AnnotationFormatError",JSE_LangAnnot.ANNOTATION_FORMAT_ERROR);
		assertEquals("java.lang.annotation.Documented",JSE_LangAnnot.DOCUMENTED);
		assertEquals("java.lang.annotation.Inherited",JSE_LangAnnot.INHERITED);
		assertEquals("java.lang.annotation.Retention",JSE_LangAnnot.RETENTION);
		assertEquals("java.lang.annotation.Target",JSE_LangAnnot.TARGET);
		assertEquals(JSE_LangAnnot.class.getName(), JSE_LangAnnot.INSTANCE.getClass().getName());
	
		assertEquals("ANNOTATION",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.Annotation"));
    assertEquals("ELEMENT_TYPE",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.ElementType"));
    assertEquals("RETENTION_POLICY",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.RetentionPolicy"));
    assertEquals("ANNOTATION_TYPE_MISMATCH_EXCEPTION",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.AnnotationTypeMismatchException"));
    assertEquals("INCOMPLETE_ANNOTATION_EXCEPTION",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.IncompleteAnnotationException"));
    assertEquals("ANNOTATION_FORMAT_ERROR",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.AnnotationFormatError"));
    assertEquals("DOCUMENTED",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.Documented"));
    assertEquals("INHERITED",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.Inherited"));
    assertEquals("RETENTION",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.Retention"));
    assertEquals("TARGET",JSE_LangAnnot.INSTANCE.getConstantName("java.lang.annotation.Target"));
	}
	
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 21;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 21;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
