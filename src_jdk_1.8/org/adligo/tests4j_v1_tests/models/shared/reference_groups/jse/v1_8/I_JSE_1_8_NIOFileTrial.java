package org.adligo.tests4j_v1_tests.models.shared.reference_groups.jse.v1_8;

import org.adligo.tests4j.models.shared.reference_groups.jse.v1_8.I_JSE_1_8_NIOFile;
import org.adligo.tests4j.shared.asserts.reference.AllowedReferences;
import org.adligo.tests4j.system.shared.trials.SourceFileScope;
import org.adligo.tests4j.system.shared.trials.Test;
import org.adligo.tests4j_tests.base_trials.I_CountType;
import org.adligo.tests4j_tests.base_trials.SourceFileCountingTrial;
import org.adligo.tests4j_tests.references_groups.Tests4J_JSE_v1_8_GwtReferenceGroup;

@SourceFileScope (sourceClass=I_JSE_1_8_NIOFile.class)
@AllowedReferences (groups=Tests4J_JSE_v1_8_GwtReferenceGroup.class)
public class I_JSE_1_8_NIOFileTrial extends SourceFileCountingTrial {

	@Test
	public void testConstants() {
		//autogenerated by org.adligo.tests4j_tests.models.shared.dependency_group.PackageClassNameWriter
    assertEquals("java.nio.file.CopyOption",I_JSE_1_8_NIOFile.COPY_OPTION);
    assertEquals("java.nio.file.DirectoryStream",I_JSE_1_8_NIOFile.DIRECTORY_STREAM);
    assertEquals("java.nio.file.DirectoryStream$Filter",I_JSE_1_8_NIOFile.FILTER);
    assertEquals("java.nio.file.FileVisitor",I_JSE_1_8_NIOFile.FILE_VISITOR);
    assertEquals("java.nio.file.OpenOption",I_JSE_1_8_NIOFile.OPEN_OPTION);
    assertEquals("java.nio.file.Path",I_JSE_1_8_NIOFile.PATH);
    assertEquals("java.nio.file.PathMatcher",I_JSE_1_8_NIOFile.PATH_MATCHER);
    assertEquals("java.nio.file.SecureDirectoryStream",I_JSE_1_8_NIOFile.SECURE_DIRECTORY_STREAM);
    assertEquals("java.nio.file.Watchable",I_JSE_1_8_NIOFile.WATCHABLE);
    assertEquals("java.nio.file.WatchEvent",I_JSE_1_8_NIOFile.WATCH_EVENT);
    assertEquals("java.nio.file.WatchEvent$Kind",I_JSE_1_8_NIOFile.KIND);
    assertEquals("java.nio.file.WatchEvent$Modifier",I_JSE_1_8_NIOFile.MODIFIER);
    assertEquals("java.nio.file.WatchKey",I_JSE_1_8_NIOFile.WATCH_KEY);
    assertEquals("java.nio.file.WatchService",I_JSE_1_8_NIOFile.WATCH_SERVICE);
    assertEquals("java.nio.file.Files",I_JSE_1_8_NIOFile.FILES);
    assertEquals("java.nio.file.FileStore",I_JSE_1_8_NIOFile.FILE_STORE);
    assertEquals("java.nio.file.FileSystem",I_JSE_1_8_NIOFile.FILE_SYSTEM);
    assertEquals("java.nio.file.FileSystems",I_JSE_1_8_NIOFile.FILE_SYSTEMS);
    assertEquals("java.nio.file.LinkPermission",I_JSE_1_8_NIOFile.LINK_PERMISSION);
    assertEquals("java.nio.file.Paths",I_JSE_1_8_NIOFile.PATHS);
    assertEquals("java.nio.file.SimpleFileVisitor",I_JSE_1_8_NIOFile.SIMPLE_FILE_VISITOR);
    assertEquals("java.nio.file.StandardWatchEventKinds",I_JSE_1_8_NIOFile.STANDARD_WATCH_EVENT_KINDS);
    assertEquals("java.nio.file.AccessMode",I_JSE_1_8_NIOFile.ACCESS_MODE);
    assertEquals("java.nio.file.FileVisitOption",I_JSE_1_8_NIOFile.FILE_VISIT_OPTION);
    assertEquals("java.nio.file.FileVisitResult",I_JSE_1_8_NIOFile.FILE_VISIT_RESULT);
    assertEquals("java.nio.file.LinkOption",I_JSE_1_8_NIOFile.LINK_OPTION);
    assertEquals("java.nio.file.StandardCopyOption",I_JSE_1_8_NIOFile.STANDARD_COPY_OPTION);
    assertEquals("java.nio.file.StandardOpenOption",I_JSE_1_8_NIOFile.STANDARD_OPEN_OPTION);
    assertEquals("java.nio.file.AccessDeniedException",I_JSE_1_8_NIOFile.ACCESS_DENIED_EXCEPTION);
    assertEquals("java.nio.file.AtomicMoveNotSupportedException",I_JSE_1_8_NIOFile.ATOMIC_MOVE_NOT_SUPPORTED_EXCEPTION);
    assertEquals("java.nio.file.ClosedDirectoryStreamException",I_JSE_1_8_NIOFile.CLOSED_DIRECTORY_STREAM_EXCEPTION);
    assertEquals("java.nio.file.ClosedFileSystemException",I_JSE_1_8_NIOFile.CLOSED_FILE_SYSTEM_EXCEPTION);
    assertEquals("java.nio.file.ClosedWatchServiceException",I_JSE_1_8_NIOFile.CLOSED_WATCH_SERVICE_EXCEPTION);
    assertEquals("java.nio.file.DirectoryIteratorException",I_JSE_1_8_NIOFile.DIRECTORY_ITERATOR_EXCEPTION);
    assertEquals("java.nio.file.DirectoryNotEmptyException",I_JSE_1_8_NIOFile.DIRECTORY_NOT_EMPTY_EXCEPTION);
    assertEquals("java.nio.file.FileAlreadyExistsException",I_JSE_1_8_NIOFile.FILE_ALREADY_EXISTS_EXCEPTION);
    assertEquals("java.nio.file.FileSystemAlreadyExistsException",I_JSE_1_8_NIOFile.FILE_SYSTEM_ALREADY_EXISTS_EXCEPTION);
    assertEquals("java.nio.file.FileSystemException",I_JSE_1_8_NIOFile.FILE_SYSTEM_EXCEPTION);
    assertEquals("java.nio.file.FileSystemLoopException",I_JSE_1_8_NIOFile.FILE_SYSTEM_LOOP_EXCEPTION);
    assertEquals("java.nio.file.FileSystemNotFoundException",I_JSE_1_8_NIOFile.FILE_SYSTEM_NOT_FOUND_EXCEPTION);
    assertEquals("java.nio.file.InvalidPathException",I_JSE_1_8_NIOFile.INVALID_PATH_EXCEPTION);
    assertEquals("java.nio.file.NoSuchFileException",I_JSE_1_8_NIOFile.NO_SUCH_FILE_EXCEPTION);
    assertEquals("java.nio.file.NotDirectoryException",I_JSE_1_8_NIOFile.NOT_DIRECTORY_EXCEPTION);
    assertEquals("java.nio.file.NotLinkException",I_JSE_1_8_NIOFile.NOT_LINK_EXCEPTION);
    assertEquals("java.nio.file.ProviderMismatchException",I_JSE_1_8_NIOFile.PROVIDER_MISMATCH_EXCEPTION);
    assertEquals("java.nio.file.ProviderNotFoundException",I_JSE_1_8_NIOFile.PROVIDER_NOT_FOUND_EXCEPTION);
    assertEquals("java.nio.file.ReadOnlyFileSystemException",I_JSE_1_8_NIOFile.READ_ONLY_FILE_SYSTEM_EXCEPTION);
	}
	
	@Override
	public int getTests(I_CountType type) {
		return super.getTests(type, 1, true);
	}

	@Override
	public int getAsserts(I_CountType type) {
		int thisAsserts = 47;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			return super.getAsserts(type, thisAsserts + thisAfterAsserts);
		} else {
			return super.getAsserts(type, thisAsserts);
		}
	}

	@Override
	public int getUniqueAsserts(I_CountType type) {
		int thisUniqueAsserts = 47;
		//code coverage and circular dependencies +
		//custom afterTrialTests
		//+ see above
		int thisAfterUniqueAsserts = 3;
		if (type.isFromMetaWithCoverage()) {
			//code coverage and circular dependencies +
			//custom afterTrialTests
			return super.getUniqueAsserts(type, thisUniqueAsserts + thisAfterUniqueAsserts);
		} else {
			return super.getUniqueAsserts(type, thisUniqueAsserts);
		}
	}

}
